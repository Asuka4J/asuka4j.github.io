<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Jiaqing.me</title>
 <link href="http://jiaqing.me/" rel="self"/>
 <link href="http://jiaqing.me"/>
 <updated>2013-08-10T18:34:35+08:00</updated>
 <id>http://jiaqing.me</id>
 <author>
   <name>Asuka4J</name>
   <email>asuka4j@gmail.com</email>
 </author>

 
 <entry>
   <title>城市印象：三亚</title>
   <link href="http://jiaqing.me/life/2013/05/27/impress-sanya"/>
   <updated>2013-05-27T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2013/05/27/impress-sanya</id>
   <content type="html">&lt;h3 id='day1'&gt;DAY1&lt;/h3&gt;

&lt;p&gt;虽说是行程第一天，但对我来说已经蛮疲惫了，因为之前是在家休假，我得赶早上九点的飞机先到上海和某人汇合，然后再一起出发到三亚。苦逼的是，我先是到了虹桥机场，然后横穿整个上海到浦东机场。第一次从浦东T2航站楼出发，这个航站楼是扁平化设计的，出发到达都在同一层，于是乎，等我们走到最末端的96号登机口时几乎奔溃。这次非三亚的人不少，应该也都是冲着假期吧，其中以情侣和亲自游居多，不像去丽江的时候，还能碰上不少孤身独行者。因为太疲惫，我在飞机上晕晕沉沉晃了三个小时后，飞机降落到了三亚凤凰机场。凤凰机场很小，没走两步就出了机场。虽说这时已经是晚上十点，但当那自动门打开刹那，顿时能感受到阵阵热浪袭来，果然是热带地区啊。&lt;br /&gt;因为公交车末班车都停运了，我们直接打车到了酒店。和丽江的小家客栈比起来，三亚的度假酒店可真是高端大气国际化。进门就是巨大的东南亚风格的大堂，大堂里除了各施其职的服务员外，零零散散还有不少游客，直接在这里纳凉闲聊上网。我们办理好checkin，就直接奔着0618号房去了。房间不算非常豪华，但已经很不错了，各种旅行设备一应俱全，浴缸、冰箱、保险箱、油烟机、烘干机、躺椅、海景阳台&amp;#8230;意外的是居然还提供了入住水果和洗衣粉。今天实在太困了，没多久我就进入了梦乡。&lt;br /&gt;走死人不偿命的浦东T2航站楼，其实这只是入口：&lt;br /&gt;&lt;center&gt;&lt;img src='http://pic.yupoo.com/asuka4j/CW4gHE3N/medium.jpg' /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id='day2'&gt;DAY2&lt;/h3&gt;

&lt;p&gt;一大早就被某人喊醒了，原来某人一直惦记着酒店的早餐呢，好吧，洗漱完毕出发觅食。G层餐厅几乎满座，提供的餐饮也是非常丰盛，看来这次必须饕餮一番了。不过吃到一半突然就下起了大雨，我们只能现在酒店园区内闲晃了，顺便也探探险，看这里面都有哪些机关密室。这时，静静地躺在走廊躺椅上听着哗哗的雨水拍打着园区里的丛林树叶，真是超级惬意。&lt;br /&gt;雨停后，我们径直来到酒店门口的三亚湾沙滩，从地下通道出来时真是眼前一亮，眼前是直接看到海平线的泛蓝大海，左右两边是连绵不绝的三亚湾沙滩，这番景象直接秒杀厦门、青岛、北戴河啊。我们沿着沙滩向市区方向徒步走了很远（似乎还没走到椰海长廊），快到极限的时候还是忍不住打了个出租车，开到市区第一海鲜市场。&lt;br /&gt;这里的海鲜购买和制作是分开的，就是游客先到海鲜摊位上购买活生生的水产，然后带到加工店让老板加工。这一区最出名的加工店是小胡子和梅姐，虽然来的时间不是饭店，但还是人满为患，我们在梅姐家正好蹭到了空位，第一餐就在这里解决了。味道怎么样呢？就是基围虾直接吃到饱，嗯，就这个感觉。吃完海鲜大餐，我们就坐了八路公交灰溜溜回酒店了，这八路公交似乎就是跑市区主干道的，大多景点都能看到它的身影。&lt;br /&gt;回到酒店正好快到傍晚，为了把今天下肚的东东好好消化下，我们换起泳衣就往酒店园区的游泳池跑。游完泳，正好到了园区里的BBQ时间，泡完澡在阳台上泡泡茶，边听着楼下BBQ展台女老外的歌声，我们在网上预定了明天亚龙湾热带天堂景区一日游的团票。&lt;/p&gt;

&lt;h3 id='day3'&gt;DAY3&lt;/h3&gt;

&lt;p&gt;跟团游最不方便的就是，时间不能自主安排。由于我们是离景区最远的散客，导游要我们早上七点就到外面等旅游大巴，杯具。起床的时候都能感觉到身体严重的不听使唤，匆匆在G层吃完早餐就赶着上车了。大巴车走走停停，不断接收散客，几乎清一色的青年情侣。路上我特意开着咕咚运动记录着路线，回来一看，足足来了有34公里才到达亚龙湾热带天堂景区，三亚真是个长条形的城市，和深圳有的一拼。&lt;br /&gt;今天的行程分为上午的热带天堂和下午的亚龙湾海滩两阶段。导游是个东北小伙，已经在三亚从业多年。热带天堂的第一段是兰花谷，不是很有意思，而且进来不久我们团就被拉到小黑屋里听营销讲座了。有趣的是，讲座过后发现，主动掏钱购买的基本都是北方人，而南方人（特别是四川人）则是嘴里带着一丝坏笑出来。第二段我们来到了非诚勿扰里的经典镜头，悬空60米高的索桥。因为山谷气流的关系，走到索桥中间的时候左右晃动得厉害，还真有点小怕，不知葛优当时怎么这么淡定。索桥对面的山头就是传说中的鸟巢度假村了，若干全木质小屋依山搭建，开窗风景甚好，还配备了露天泳池，灰藏Natural。对了，导游这里的租金便宜的一晚8000大洋，葛优住的那间则要上万。听完我们默默地继续前进。第三段是山的最高点，登上塔顶，整个亚龙湾360°尽收眼底，风景甚好。这一路果然没白走。&lt;br /&gt;热带天堂出来的下一站是亚龙湾沙滩。据介绍，这里因为有着核潜艇基地的关系，这片海域禁止任何船只进入，几乎无污染，所以海面海底都特别漂亮。这里有很多水上项目，比如海底浮潜、水上摩托、香蕉船等等，不过我俩兴趣都不大。也受益于什么都没报，省去了很多排队时间，在海滩上逛足三小时。这里的水确实比三亚湾清澈很多，远远都能看到海底，沙子也更加细腻，几乎没有杂质。值得一提的是，本来想凑近去拍下核潜艇基地的军舰，不了被哨兵拦下，看来这边警戒确实蛮严格的。&lt;br /&gt;都说三亚宰客厉害，其实到今天才体验到了。在亚龙湾沙滩的时候饿的不行，跑出来要了碗兰州拉面，20大洋，没有牛肉，清汤里飘着一直孤零零的水煮蛋，坑爹这是。回酒店时在酒店门口的餐馆吃了晚餐，回锅肉28，土豆丝18，蛋炒饭18，看到这个价格后也不敢点什么水产了。对了，吃到一半老板开着奥迪A6回来了，当看到穿着泳裤的老板和穿着睡衣的老板娘下车刹那，饭差点全喷出来了。&lt;br /&gt;天气真是多变，饭后又下起雨来了，还好赶上回到了房间。今晚的BBQ算是搞不成了，不过女老外的歌声依然荡漾，真是敬业。在阳台躺椅上小憩，夹杂着雨声和歌声，顺手拍拍园区，感觉棒极了。&lt;br /&gt;从热带天堂山顶远眺亚龙湾：&lt;br /&gt;&lt;center&gt;&lt;img src='http://pic.yupoo.com/asuka4j/CWfMHuoE/medish.jpg' /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id='day4'&gt;DAY4&lt;/h3&gt;

&lt;p&gt;今天也是蛮早就起来了，因为某人一直惦记着要到正儿八紧的海上游一次泳。今天的天气暴热，很多人都是窝在沙滩旁的躺椅上看书睡觉，就我俩傻不拉几地直接杀入水中。看某人玩的甚是Happy，我也不好阻拦了，晒黑就晒黑吧，难得下一次海呢。在这里发现老外带小孩是超级放心，母亲在岸边和人闲聊，就任由10几岁的女儿抱着几岁的小女儿往水里去，连个游泳圈都不带。不像旁边的中国家庭，不是爷爷抱一会就是妈妈抱一会，总之人不离手。&lt;br /&gt;下午继续前往市区探险+觅食。先是打车到椰海长廊，逛逛三亚三大湾的最有一个。到了才发现也是污染最严重的一个湾，可能是最靠近市区的关系，这里到处是垃圾和排污口，即使不脱鞋走着都不大舒服。在这里被狠狠地雷了一下：一对男女披着酒店浴巾就出来逛沙滩了，背后看去好是叱咤。&lt;br /&gt;今天徒步的量可不算小，我们直接从椰海长廊走到第一海鲜市场，然后又走到渔人码头，接着走到海岸边看夜里的凤凰岛。真佩服某人的脚力，不由得让我想起了学生时代一起从春熙路走到火车南站的惊险历程。今天算是累坏了，可能也是明天就要返程的缘故，两人多多少少有点心理波动，同时也在盘算着最后一天怎么安排比较划算。&lt;/p&gt;

&lt;h3 id='day5'&gt;DAY5&lt;/h3&gt;

&lt;p&gt;半夜里想到一个比较休闲的方案，后来也就基本按这个步骤执行了：吃完最后一顿饕餮早餐后，到园区享受最后一次私人泳池。中午退房后在大堂沙发上休息休息，顺手开始整理照片和游记（我才知道为什么这么多人在大堂休闲了，是舍不得走啊）。待到傍晚直接到机场。&lt;br /&gt;出乎意料的是，上海两个机场因为旅游返程高峰不堪重负，不得不宣告今晚飞上海的航班取消。第一次遇到航班取消的状况，一切来的太突然，预案也没预想那么周到。接下来上演了领泡面，等班车拉回酒店，凌晨五点被叫醒，赶七点钟航班回程的遭遇。回来后才知道，如果买了航空意外险，碰到这种情况是可以向保险公司索赔的，亏了。不过总体来说，三亚作为不太如意的上半年唯一的一次旅行，我和某人还是相当满意了。谢谢某人的细心安排。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Goodbye Baidu</title>
   <link href="http://jiaqing.me/work/2013/05/17/goodbye-baidu"/>
   <updated>2013-05-17T00:00:00+08:00</updated>
   <id>http://jiaqing.me/work/2013/05/17/goodbye-baidu</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>我的2012</title>
   <link href="http://jiaqing.me/life/2013/01/01/summary-2012"/>
   <updated>2013-01-01T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2013/01/01/summary-2012</id>
   <content type="html">&lt;h3 id='id24'&gt;计划回顾&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;习惯培养：坚持写周记，重在每周总结和反思；坚持每日跑步锻炼；养成良好作息习惯；80%&lt;/li&gt;

&lt;li&gt;学习提升：维护博客，写12篇技术文章，3篇在工作或技术上的见解；0%&lt;/li&gt;

&lt;li&gt;知识拓展：订阅杂志；开始关注投资理财；80%&lt;/li&gt;

&lt;li&gt;家庭生活：结婚旅行，婚纱照，去一次香港；70%&lt;/li&gt;

&lt;li&gt;设备环境：用上Ubuntu，某人用上MAC OSX，其它设备不增加；100%&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='id25'&gt;年度最佳&lt;/h3&gt;

&lt;p&gt;+ 年度电影：&lt;em&gt;触不可及&lt;/em&gt;，剧情、演技、配乐都超赞&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;年度音乐：&lt;em&gt;久石让&lt;/em&gt;，他的宫崎骏系列钢琴曲陪我度过了出差的53天&lt;/li&gt;

&lt;li&gt;年度图书：&lt;em&gt;HTTP权威指南&lt;/em&gt;，最全面讲解web结构和相关知识的技术图书，覆盖面之广超乎想象&lt;br /&gt;+ 年度杂志：&lt;em&gt;心理月刊&lt;/em&gt;，让我开始从新认识自己&lt;br /&gt;+ 年度网站：&lt;em&gt;知乎&lt;/em&gt;，逛微博的时间都变成逛知乎了，推荐你也这么做&lt;br /&gt;+ 年度微博：&lt;em&gt;陈利人&lt;/em&gt;，不一定都是原创，但技术含量是所有微博里面最高的，值得逐条细读&lt;/li&gt;

&lt;li&gt;年度应用：&lt;em&gt;Evernote&lt;/em&gt;，超好用的知识管理应用，当然，用得好才能发挥功效&lt;/li&gt;

&lt;li&gt;年度服装：&lt;em&gt;H&amp;amp;M&lt;/em&gt;，今年的风格有点偏小清新，还是蛮喜欢的&lt;br /&gt;+ 年度景点：&lt;em&gt;丽江&lt;/em&gt;，几乎每个从丽江回来的人都想去第二次&lt;br /&gt;+ 年度设计：&lt;em&gt;铆钉风&lt;/em&gt;，以女式着装居多，鞋子、外套、帽子等等，超霸气&lt;/li&gt;

&lt;li&gt;年度硬件：&lt;em&gt;Note&lt;/em&gt;，第一步智能机（之前是一个用了5年的nokia），在移动应用上带来很多便利和乐趣&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='2013'&gt;2013展望&lt;/h3&gt;

&lt;p&gt;+ 习惯培养：坚持日记，坚持英语学习，坚持自己的一套作息安排； + 学习提升：深入学习一门脚本语言；关注管理层面的知识；维护博客，续写没完成的12篇技术文章； + 家庭生活：去一次香港； + 设备环境：自己也切换到MAC OSX，其它设备不增加；&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>城市印象：潮州</title>
   <link href="http://jiaqing.me/life/2012/10/09/impress-chaozhou"/>
   <updated>2012-10-09T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2012/10/09/impress-chaozhou</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>事务（三）两阶段提交</title>
   <link href="http://jiaqing.me/tech/2012/10/05/tech-transaction-3"/>
   <updated>2012-10-05T00:00:00+08:00</updated>
   <id>http://jiaqing.me/tech/2012/10/05/tech-transaction-3</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>事务（二）Spring事务管理</title>
   <link href="http://jiaqing.me/tech/2012/10/03/tech-transaction-2"/>
   <updated>2012-10-03T00:00:00+08:00</updated>
   <id>http://jiaqing.me/tech/2012/10/03/tech-transaction-2</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>事务（一）事务基础</title>
   <link href="http://jiaqing.me/tech/2012/10/01/tech-transaction-1"/>
   <updated>2012-10-01T00:00:00+08:00</updated>
   <id>http://jiaqing.me/tech/2012/10/01/tech-transaction-1</id>
   <content type="html">&lt;p&gt;定义&lt;/p&gt;

&lt;p&gt;ACID&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>城市印象：常州</title>
   <link href="http://jiaqing.me/life/2012/09/30/impress-changzhou"/>
   <updated>2012-09-30T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2012/09/30/impress-changzhou</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>城市印象：北京</title>
   <link href="http://jiaqing.me/life/2012/09/01/impress-beijing"/>
   <updated>2012-09-01T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2012/09/01/impress-beijing</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>数据有结构（十三）哈希查找</title>
   <link href="http://jiaqing.me/tech/2012/08/29/tech-search-3"/>
   <updated>2012-08-29T00:00:00+08:00</updated>
   <id>http://jiaqing.me/tech/2012/08/29/tech-search-3</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>数据有结构（十二）树查找</title>
   <link href="http://jiaqing.me/tech/2012/08/25/tech-search-2"/>
   <updated>2012-08-25T00:00:00+08:00</updated>
   <id>http://jiaqing.me/tech/2012/08/25/tech-search-2</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>城市印象：北戴河</title>
   <link href="http://jiaqing.me/life/2012/08/25/impress-beidaihe"/>
   <updated>2012-08-25T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2012/08/25/impress-beidaihe</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>数据有结构（十一）线性查找</title>
   <link href="http://jiaqing.me/tech/2012/08/21/tech-search-1"/>
   <updated>2012-08-21T00:00:00+08:00</updated>
   <id>http://jiaqing.me/tech/2012/08/21/tech-search-1</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>数据有结构（十）归并排序</title>
   <link href="http://jiaqing.me/tech/2012/06/08/tech-sort-4"/>
   <updated>2012-06-08T00:00:00+08:00</updated>
   <id>http://jiaqing.me/tech/2012/06/08/tech-sort-4</id>
   <content type="html">&lt;h3 id='id22'&gt;归并排序&lt;/h3&gt;

&lt;h3 id='id23'&gt;性能测试&lt;/h3&gt;</content>
 </entry>
 
 <entry>
   <title>城市印象：上海</title>
   <link href="http://jiaqing.me/life/2012/06/06/impress-shanghai"/>
   <updated>2012-06-06T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2012/06/06/impress-shanghai</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>数据有结构（九）插入排序</title>
   <link href="http://jiaqing.me/tech/2012/06/04/tech-sort-3"/>
   <updated>2012-06-04T00:00:00+08:00</updated>
   <id>http://jiaqing.me/tech/2012/06/04/tech-sort-3</id>
   <content type="html">&lt;h3 id='id17'&gt;插入排序&lt;/h3&gt;

&lt;h3 id='id18'&gt;希尔排序&lt;/h3&gt;

&lt;h3 id='id19'&gt;二叉查找树排序&lt;/h3&gt;

&lt;h3 id='id20'&gt;性能测试&lt;/h3&gt;</content>
 </entry>
 
 <entry>
   <title>Running</title>
   <link href="http://jiaqing.me/life/2012/05/30/memory-running"/>
   <updated>2012-05-30T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2012/05/30/memory-running</id>
   <content type="html">&lt;p&gt;关于运动，谈得上喜欢的寥寥无几。倒不是因为懒，可能和身体条件有一定关系，目前偏瘦的体质承受不了长时间高强度的消耗，另外一旦流汗眼镜就很容易从鼻梁滑下来，总要用手去推一把，颇影响反应力。做不好，久而久之，就都失去了兴趣。但，有一项运动倒是仍在坚持，而且还越发喜欢了，那就是慢跑。&lt;br /&gt;工作日里心情最愉快的时间一般在晚上，结束了一天忙碌的工作后，终于可以回家享受下自己一点小时光。晚上的马路和白天差别很大，没有那么亮、没有车水马龙、没有各种噪音，这时候走在路上就不由自主地想跑上一趟。Just run，like in the sky。跑步的过程是对全身的放松，特别是紧绷了一天的脑细胞，如果能跑上个3、5公里，还会有种通体舒畅的愉悦感（about &lt;a href='http://zh.wikipedia. org/wiki/%E8%85%A6%E5%85%A7%E5%95%A1' style='text-decoration :none ;' target='_blank'&gt; &lt;strong&gt;ruuner&amp;#39;s high&lt;/strong&gt;&lt;/a&gt;）。另外，偶尔尝试下不同的路线，换换风景，也是挺有乐趣的。&lt;br /&gt;目前觉得最有意思的一次，是从居住的小区一路跑到陆家嘴。路程不算长，但却挺有趣，因为它不是环路！那天也不知道被什么风吹着了，出门前本打算在附近随便绕绕，就沿着浦东大道方向走。晚上10点的浦东大道虽然车还挺多，但开阔的视野，和远处陆家嘴天空的五彩灯光，似乎让自己忘却了疲惫。一路到了陆家嘴，发现囧了，身无分文，除了用来记录这张路线图的手机，啥都没有。也还好有手机，得以远程求救&lt;a href='http://yokowinds.diandian.com/' style='text-decoration :none ;' target='_blank'&gt; &lt;strong&gt; @yokowinds&lt;/strong&gt;&lt;/a&gt;赶过来接驾，不然靠走回去，可不知要到何时了。&lt;br /&gt;&lt;center&gt;&lt;img id='9EE382F35E616D3ED837772593F8B767' src='http://m1.img.libdd.com/farm4/157/F4752687235885BF04917BD6C0377A9D_500_463.jpg' /&gt;&lt;/center&gt; 有时会用App（&lt;a href='http://www.codoon.com/p/asuka4j' style='text-decoration :none ;' target='_blank'&gt;咕咚运动&lt;/a&gt;）记录下慢跑的足迹。如果你也想尝试一下慢跑，可以先查查资料（&lt;a href='http://bbs.runbible.cn/' style='text-decoration :none ;' target='_blank'&gt;跑步圣经论坛&lt;/a&gt;），看看一些关于锻炼方式、跑步姿势、挑选跑鞋、膝关节养护的资料和建议。&lt;br /&gt;Just run, like in the sky.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>数据有结构（八）选择排序</title>
   <link href="http://jiaqing.me/tech/2012/05/28/tech-sort-2"/>
   <updated>2012-05-28T00:00:00+08:00</updated>
   <id>http://jiaqing.me/tech/2012/05/28/tech-sort-2</id>
   <content type="html">&lt;h2 id='id13'&gt;直接选择排序&lt;/h2&gt;
&lt;center&gt;&lt;img src='' /&gt;&lt;/center&gt;
&lt;p&gt;时间复杂度： O(n^2) 空间复杂度：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class='sd'&gt;    选择排序&lt;/span&gt;
&lt;span class='sd'&gt;    L: 待排序列&lt;/span&gt;
&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;selection&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='ow'&gt;not&lt;/span&gt; &lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt;
    &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='nb'&gt;range&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nb'&gt;len&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
        &lt;span class='n'&gt;minIndex&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt;
        &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='n'&gt;y&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='nb'&gt;range&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nb'&gt;len&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
            &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;minIndex&lt;/span&gt;&lt;span class='p'&gt;]:&lt;/span&gt; &lt;span class='n'&gt;minIndex&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;y&lt;/span&gt;
        &lt;span class='n'&gt;tmp&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
        &lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;minIndex&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
        &lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;minIndex&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;tmp&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;L&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='id14'&gt;堆排序&lt;/h2&gt;

&lt;h2 id='id15'&gt;性能测试&lt;/h2&gt;

&lt;h2 id='k'&gt;前K大问题&lt;/h2&gt;</content>
 </entry>
 
 <entry>
   <title>数据有结构（七）交换排序</title>
   <link href="http://jiaqing.me/tech/2012/05/26/tech-sort-1"/>
   <updated>2012-05-26T00:00:00+08:00</updated>
   <id>http://jiaqing.me/tech/2012/05/26/tech-sort-1</id>
   <content type="html">&lt;h2 id='id8'&gt;排序分类&lt;/h2&gt;

&lt;p&gt;交换排序：冒泡排序、快速排序&lt;/p&gt;

&lt;h2 id='id9'&gt;冒泡排序&lt;/h2&gt;
&lt;center&gt;&lt;img src='' /&gt;&lt;/center&gt;
&lt;p&gt;时间复杂度：O(n^2) 空间复杂度：O(1)&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class='sd'&gt;    冒泡排序 &lt;/span&gt;
&lt;span class='sd'&gt;    L: 待排元素列表&lt;/span&gt;
&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;bubble&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='ow'&gt;not&lt;/span&gt; &lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt;
    &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='nb'&gt;range&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nb'&gt;len&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
        &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='n'&gt;y&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='nb'&gt;range&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;len&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
            &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;]:&lt;/span&gt;
                &lt;span class='n'&gt;tmp&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
                &lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
                &lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;tmp&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;L&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='id10'&gt;快速排序&lt;/h2&gt;
&lt;center&gt;&lt;img src='' /&gt;&lt;/center&gt;
&lt;p&gt;时间复杂度：O(NlgN) 最差时间复杂度： O(n^2) 空间复杂度： 非稳定&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class='sd'&gt;    快速排序&lt;/span&gt;
&lt;span class='sd'&gt;    L：待排序列&lt;/span&gt;
&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;quick&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='ow'&gt;not&lt;/span&gt; &lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;quick&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;:]&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;]])&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;quick&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;:]&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;=&lt;/span&gt; &lt;span class='n'&gt;L&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;]])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='id11'&gt;性能比较&lt;/h2&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='kn'&gt;import&lt;/span&gt; &lt;span class='nn'&gt;datetime&lt;/span&gt;
&lt;span class='kn'&gt;import&lt;/span&gt; &lt;span class='nn'&gt;random&lt;/span&gt;
&lt;span class='kn'&gt;import&lt;/span&gt; &lt;span class='nn'&gt;Sort&lt;/span&gt;

&lt;span class='c'&gt;# 初始化测试数据：一个1000元素的无序列表&lt;/span&gt;
&lt;span class='n'&gt;size&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1000&lt;/span&gt;
&lt;span class='n'&gt;elements&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='n'&gt;size&lt;/span&gt;
&lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='nb'&gt;range&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;size&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='n'&gt;elements&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;random&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;randint&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;99999&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='c'&gt;# 测试冒泡性能&lt;/span&gt;
&lt;span class='k'&gt;print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;----bubble----&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='n'&gt;times&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='nb'&gt;range&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='n'&gt;begin&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;datetime&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;datetime&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;now&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
    &lt;span class='n'&gt;result&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;Sort&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;bubble&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;elements&lt;/span&gt;&lt;span class='p'&gt;[:])&lt;/span&gt;
    &lt;span class='n'&gt;end&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;datetime&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;datetime&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;now&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
    &lt;span class='k'&gt;print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;cost = &amp;#39;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='nb'&gt;str&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;end&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='n'&gt;begin&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;

&lt;span class='c'&gt;# 测试快排性能&lt;/span&gt;
&lt;span class='k'&gt;print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;----quick----&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='n'&gt;times&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='nb'&gt;range&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='n'&gt;begin&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;datetime&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;datetime&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;now&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
    &lt;span class='n'&gt;result&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;Sort&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;quick&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;elements&lt;/span&gt;&lt;span class='p'&gt;[:])&lt;/span&gt;
    &lt;span class='n'&gt;end&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;datetime&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;datetime&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;now&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
    &lt;span class='k'&gt;print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;cost = &amp;#39;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='nb'&gt;str&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;end&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='n'&gt;begin&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，1000个元素在内存中的排序，冒泡排序平均耗时170ms，快速排序平均耗时7ms，差距还是蛮大的。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='o'&gt;----&lt;/span&gt;&lt;span class='n'&gt;bubble&lt;/span&gt;&lt;span class='o'&gt;----&lt;/span&gt;
&lt;span class='n'&gt;cost&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;00.175512&lt;/span&gt;
&lt;span class='n'&gt;cost&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;00.170707&lt;/span&gt;
&lt;span class='n'&gt;cost&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;00.178852&lt;/span&gt;
&lt;span class='n'&gt;cost&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;00.186086&lt;/span&gt;
&lt;span class='n'&gt;cost&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;00.179878&lt;/span&gt;
&lt;span class='n'&gt;cost&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;00.158608&lt;/span&gt;
&lt;span class='n'&gt;cost&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;00.175306&lt;/span&gt;
&lt;span class='n'&gt;cost&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;00.175251&lt;/span&gt;
&lt;span class='n'&gt;cost&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;00.177794&lt;/span&gt;
&lt;span class='n'&gt;cost&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;00.177761&lt;/span&gt;
&lt;span class='o'&gt;----&lt;/span&gt;&lt;span class='n'&gt;quick&lt;/span&gt;&lt;span class='o'&gt;----&lt;/span&gt;
&lt;span class='n'&gt;cost&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;00.007773&lt;/span&gt;
&lt;span class='n'&gt;cost&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;00.004686&lt;/span&gt;
&lt;span class='n'&gt;cost&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;00.006913&lt;/span&gt;
&lt;span class='n'&gt;cost&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;00.007682&lt;/span&gt;
&lt;span class='n'&gt;cost&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;00.007318&lt;/span&gt;
&lt;span class='n'&gt;cost&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;00.006283&lt;/span&gt;
&lt;span class='n'&gt;cost&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;00.006936&lt;/span&gt;
&lt;span class='n'&gt;cost&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;00.008862&lt;/span&gt;
&lt;span class='n'&gt;cost&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;00.005037&lt;/span&gt;
&lt;span class='n'&gt;cost&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;00.004529&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>城市印象：丽江</title>
   <link href="http://jiaqing.me/life/2012/05/20/impress-lijiang"/>
   <updated>2012-05-20T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2012/05/20/impress-lijiang</id>
   <content type="html">&lt;p&gt;某人的婚假即将到期了，我也趁着这个理由厚脸皮地请了一周的假期，拼上前后的周末，凑出九天时间出来度假。BTW，到一个寻艳遇的地方度婚假，是一种神马心态？&lt;/p&gt;

&lt;h3 id='day1_'&gt;Day.1 大研古城初印象&lt;/h3&gt;

&lt;p&gt;从攻略上看，因为上海直飞丽江的机票比较贵而且常年不打折，不少驴友选择先飞昆明，然后坐九个小时绿皮车到丽江。这样虽廉价很多，但考虑出来玩的时间本来就不多，拿时间换钱实际不划算。所以最终我们还是选择直飞，不过稍微折中一下，先动车到杭州，然后直飞丽江。&lt;br /&gt;可能跟丽江的特色有关，出发的飞机上几乎清一色年轻人，三两成群，也不乏单身一人的，想必是准备到丽江做点什么的吧。当机长广播说飞机即将抵达丽江的时候，飞机上竟上演了一幕求婚记，男主角先是假装上厕所，机上广播响起烂熳的音乐，然后他悄悄从后面来到女主角座位前，递上戒指，过程中还有后端的游客负责录像，看来是谋划已久。看这女主角哭的不成样子，还有乘客们的欢笑。顿时觉得，我们真的即将到达一个很有意思的地方。&lt;br /&gt;虽说丽江机场很小，一眼就能望到头。但自从走出舱门的刹那，我和某人已经完全被眼前的景象震撼到了：环绕四周的群山，加上蓝得深邃的天空，这种感觉实在太美妙了。按我俩的风格，这个时候已经开启装备到处大拍特拍。意外的是机长竟然也主动过来给我俩拍合照，看来是经验人士。&lt;br /&gt;机场大巴缓缓悠悠走在山间公路上，约莫开了有三十多分钟，我们抵达了丽江市区。丽江的市区也很小，建筑物不高，一路上也没见着什么比较大型的商圈。倒是很容易就能区分本地人和游客，全身裹得严严实实的就是本地人，穿着短袖甚至连遮阳伞都不打的就是游客。和市区有巨大反差的是大研古城，也就是这次度假的目的地。他地处丽江市内，和几条主干道接壤。因为商业化的原因，整个古城几乎全是大大小小的客栈、商铺、观光景点。从攻略上看，古城内部的街道错综复杂，第一次进来的人肯定找不到北。好在客栈老板也都有所准备，直接到城外领我俩“进城”。也不知道走了多少个左转弯右转弯，我们来到了第一家客栈“猪猪小院”：这是一个全木质，古典风格的小旅馆，连老板自己的房间在内也才八个房间。好在我们预定比较早，直接占领了二楼最大的一个房间，开窗还能看到狮子山。放完行李我们就迫不及待地出门探险+觅食了。因为是第一天，而且也是傍晚了，就随便在附近几条街晃晃，顺便吃了第一碗米线+小笼包，也第一次目睹了纳西族舞蹈。&lt;br /&gt;关于大研古城的第一印象，是错综复杂的石板路，2000+家各具特色的客栈，满街的游客和犬类。&lt;br /&gt;丽江机场，蓝的深邃的天空：&lt;br /&gt;&lt;center&gt;&lt;img src='http://pic.yupoo.com/asuka4j/C839Hwts/medish.jpg' /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;大研古城：&lt;br /&gt;&lt;center&gt;&lt;img src='http://pic.yupoo.com/asuka4j/C89FxpG8/medish.jpg' /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id='day2_'&gt;Day.2 古城探险&lt;/h3&gt;

&lt;p&gt;今天的主题就是大研古镇一日游，左手地图，右手相机，穿街走巷。先是把猪猪小院附近的地形弄熟悉了，免得找不到回来的路。然后就一路瞎逛：木府前的广场、小吃一条街、四方广场、狮子山、酒吧街、一直往北走到黑龙潭公园才回头。总体而言，真是超耐逛的一个古城，处处有惊喜。出了逛街，我俩也顺手品尝了当地几大名菜的两大，石锅鱼和腊排骨。石锅鱼没太大感觉，腊排骨倒是回味至今。回程的时候已是傍晚时分，再次路过酒吧街是，景象已经和白天完全不一样，灯光绚烂，人潮鼎沸。我俩也索性进了一家叫“小巴黎”的轻酒，点上半打百威，烛光下感受感受西域歌手沧桑的嗓音。也是在这里，我俩才亲眼目睹了一处艳遇：隔壁桌坐着一个中年女子，不久来了个年轻男子直接在对面坐下，简单介绍之后，畅饮甚欢，最后相拥而去。&lt;br /&gt;本来酒量就不咋样，回到客栈时也记不清几点了，潜意识里依稀记得今天走过的条条石板路和两边的风景，还有花枝招展的各种MM，然后视线渐渐模糊，只是期盼着明天的到来。&lt;/p&gt;

&lt;h3 id='day3_'&gt;Day.3 茶马古道、拉市海、涑河，和意外&lt;/h3&gt;

&lt;p&gt;从入驻大研古城第一天，一路上就总有主动上来拉客接团去茶马古道和拉市海的，今天终于抵不住诱惑，在客栈老板那里报了名。从大研到拉市海，大概半小时小面包车的车程。大热天地在高原地区玩户外，算是一件玩命的事情，还好今天是个大阴天，大大降低了难度。到达目的地后，老板安排了一位纳西族马夫一路带领我们。先是骑马重走当年的茶马古道，其实只是绕着一座小山丘上下溜了一圈，然后继续骑行到拉市海边，改为划船。拉市海是一个淡水湖，因为纯天然的环境成为了丽江的一个景点。马夫站在船尾划着船，我俩则在前面感受眼前宁静的一幕：平静的湖面、满湖的酸角、四周环绕的群山、和阵阵桨声和鸟叫声，似乎整个世界都静止了。划船之后已到饭店，我们被送到了村长家，由村长招待。后来想想，这家到底是不是村长，也无法取证，总之是吃了一顿农家乐罢了。&lt;br /&gt;从拉市海出来，小面包把我们带到下一个重点项目：涑河古镇。涑河和大研一样是一座古镇，只是大研开发的比较早，已经完全商业化了，而涑河则相对清静很多。也有不少驴友就冲着这一点，专程住到涑河。涑河内部和大研相似，只是总体规模稍微小一些，街道也没有那么错综复杂。另外街道上的人口密度也比大研少了很多，所以逛起来相对不那么费力，视线也更开阔。印象最深的是古镇中间的广场地带，几家开放式咖啡厅和餐厅沿河排列，店里三五成群聚集了各种驴友和老外，看起来相当小资。因为涑和太漂亮了，我俩直接在里面逛了三小时，然后打车回大研。&lt;br /&gt;回到大雁已经是晚上近八点了，只是经度稍微靠西的关系，天还没全黑掉。因为某人一直惦记着这里每天晚上都有一场的&lt;a href='http://baike.baidu.com/view/738135.htm'&gt;宣科先生&lt;/a&gt;主持的丽江古乐表演，趁着时间正合适，就直接买票入座了。这个古乐队的整容可是超级强大，年事最高的已经93岁，基本各个资历深厚。虽然演奏的内容几乎领悟不到，但暗地里还是能感受到他们对纳西古乐的理解和执着。&lt;br /&gt;本来到此为止，今天的行程可算是非常充实和愉快。但就在古乐快结束的二十来分钟，出了点小状况。先是天色巨变，下起了大雨，然后坐在我们前排的一排老外毫无征兆地被他们的导游叫走，接着，我的手机收到了老爸的一条短信：丽江附近地震啦！形势不妙，我赶紧上微薄搜索附近信息，果然是地震，发生在云南和四川交汇处，泸沽湖附近，影响还不小。到这里，宣科先生的演讲刚好落幕，我俩也没什么心情再去看宣科关于支持丽江古乐的介绍了，赶紧冒雨走回客栈。刚进客栈，老板和他爸就迎上来询问，“今天怎么这么晚回来，出事情了你们知道不&amp;#8230;.云云”，和老板聊完，心情似乎更加沉重了，默默回到房间，盘算盘算后续行程怎么安排。&lt;br /&gt;其实后来想想，有时候我们也正因为共同经历了这些不顺利，反而更加促进了相互的理解，履历上增添了一些于众不同。&lt;/p&gt;

&lt;h3 id='day4_'&gt;Day.4 心情忐忑的一天&lt;/h3&gt;

&lt;p&gt;今天可以算是整个行程中心情最为消沉的一天。自从昨晚听到地震的消息后，心里就一直在盘算着后续的行程怎么安排，也没休息的很好。不知道这地震具体对丽江有多大影响？机场是否会因此而满客人，导致暂时回不去？&lt;br /&gt;因为地震就在泸沽湖附近，本打算好的泸沽湖二日游只能取消了。暂时不敢出远门，于是在广州茶餐厅吃完早饭后，就逛到了木府。木府本是丽江木氏的首府，类似于紫禁城一样的地位，后来随着纳西族的没落，木府现在成了一个旅游景点，不过里面的内容还是尽量原汁原味地还原了原木府的风貌。说到历史，以前的丽江只有“木”和“禾”两个姓氏，木属于贵族，禾属于平民。纳西族在西南这一带属于温和若柔的民族。在地里位置上，它下方是人多势众的大理，上方是彪悍的藏族人。为了保全自己的统治地位，当时的木氏只能无奈投奔了朝廷，成为朝廷在西南的一个旗子。切合的是，刚了解完纳西族的历史，后面在丽江的几天，就看到云南台在热播“木府风云”，躺在客栈看看真是够应景。&lt;br /&gt;逛完木府已经是中午过后，因为之前一直眼馋哪些在茶楼、咖啡吧闲聊蹭网的驴友，今天下午也挑了一家体验体验。一壶茶、一本草稿本、一台Air，一坐就是一下午。可能是风头过去，再加上在外面见到的都还是嬉皮笑脸的游客。对地震的担忧渐渐消退了不少。傍晚时候，我们决定不提前离开丽江了，继续玩下去。&lt;/p&gt;

&lt;h3 id='day5_'&gt;Day.5 新客栈、新面孔、新计划&lt;/h3&gt;

&lt;p&gt;丽江的客栈很多，光大研就有2000多家，所以很多游客都是一天换一家客栈，尽情体验不同的风味。今天我们也决定换一个地方了。退房前老板苦苦央求给这次的淘宝交易一个好评，好让他的客栈回到搜索结果的首页，因为前两天又被竞争对手超越了。看来这里客栈竞争真是激烈，无时不刻在打着无硝烟的战争。从猪猪小院出来后，我们顺着往古城南面走，因为整个古城是以北面大水车开始最为热闹，越到南面越清静，我们想找个比较清静的地儿。逛着逛着来到了“x”，这是一家中型规模的客栈，虽说只是中型，但已经比猪猪小院大了很多，一楼大堂直接提供了茶座、公共电脑、秋千等设施。我们要了一间二楼的房间，开门出来是一圈走廊，前面是庭院和天井，颇有东南亚原生态住宅的味道。&lt;br /&gt;客栈老板是个热情好客的（台湾？）女人，一直在大堂泡茶款待租客，并向我们推荐各种比较划算的旅游线路。在她的推荐下，我们报了明天开始两天行程的香格里拉跟团游。同时，也在大堂认识了来自上海的新婚夫妇X女士和X先生，来自青岛单身一人的Y女士，约好明天一起出发。话说，这位X先生应该是个BusinessMan，在我们谈论旅游线路的全过程中，他一直窝在远处角落里噼啪噼啪的敲着笔记本（其实后来出去玩也差不多这样），直到大家敲定了主意，X女士才将他拉过来确认订单，和大家打了声招呼。&lt;br /&gt;订好了明天的行程，今天的任务就很简单了：消磨掉剩余的时间。我们先是走出古城，来到当地知名的百姓商场购买补给品，顺路看看特产。然后回城路上，某人刚好碰到了当地知名的摄影商铺“丽江春天”的特色套餐推荐，于是后面几个小时都有了着落。傍晚，我们再次光顾了第一天吃过的米线小店，生怕回去以后再也吃不到这么正宗的米线。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;未完待续&amp;#8230;&lt;/p&gt;

&lt;h3 id='day6_'&gt;Day.6 初入藏区&lt;/h3&gt;

&lt;h3 id='day7_'&gt;Day.7 仙境普达措&lt;/h3&gt;

&lt;h3 id='day8_'&gt;Day.8 最后的休闲&lt;/h3&gt;

&lt;h3 id='day9_'&gt;Day.9 暂别丽江&lt;/h3&gt;

&lt;p&gt;关于客栈 从几年前的300+上升到2000+，生意相对不好做，要淘宝争排名，打口碑。客栈风格服务大不同，要考淘。接机，景区打折门票，桌球，大院，喝茶，公用电脑，网络质量，空调，门窗，闹市或安静，俯瞰小镇，&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Hello Octopress</title>
   <link href="http://jiaqing.me/tech/2012/05/09/hello-octopress"/>
   <updated>2012-05-09T00:00:00+08:00</updated>
   <id>http://jiaqing.me/tech/2012/05/09/hello-octopress</id>
   <content type="html">&lt;center&gt;&lt;img src='http://pic.yupoo.com/asuka4j/CKkiuCE9/medish.jpg' /&gt;&lt;/center&gt;
&lt;p&gt;最近发现了Github.pages和Octopress这两个好东东，可以用来搭建个人静态博客（all free, of course)。于是照着&lt;a href='http://octopress.org/docs/'&gt;教程&lt;/a&gt;折腾了一番，稍微捣腾出来一点样子了，历史数据陆续迁移中。至于Markdown的语法还不是很熟悉，后面再慢慢研究吧，今天先来一个Octopress版本的Hello World吧：） &lt;!-- more --&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;update 2013-05 ：因为Octopress使用起来比较繁琐，目前已经将博客切换到Octopress的原始版本Jekyll。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>数据有结构（六）多路查找树</title>
   <link href="http://jiaqing.me/tech/2012/04/06/tech-btree"/>
   <updated>2012-04-06T00:00:00+08:00</updated>
   <id>http://jiaqing.me/tech/2012/04/06/tech-btree</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>数据有结构（五）Java中的TreeMap</title>
   <link href="http://jiaqing.me/tech/2012/04/05/tech-tree-map-in-java"/>
   <updated>2012-04-05T00:00:00+08:00</updated>
   <id>http://jiaqing.me/tech/2012/04/05/tech-tree-map-in-java</id>
   <content type="html">&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='java'&gt;    &lt;span class='cm'&gt;/**&lt;/span&gt;
&lt;span class='cm'&gt;     * Associates the specified value with the specified key in this map.&lt;/span&gt;
&lt;span class='cm'&gt;     * If the map previously contained a mapping for the key, the old&lt;/span&gt;
&lt;span class='cm'&gt;     * value is replaced.&lt;/span&gt;
&lt;span class='cm'&gt;     *&lt;/span&gt;
&lt;span class='cm'&gt;     * @param key key with which the specified value is to be associated&lt;/span&gt;
&lt;span class='cm'&gt;     * @param value value to be associated with the specified key&lt;/span&gt;
&lt;span class='cm'&gt;     *&lt;/span&gt;
&lt;span class='cm'&gt;     * @return the previous value associated with {@code key}, or&lt;/span&gt;
&lt;span class='cm'&gt;     *         {@code null} if there was no mapping for {@code key}.&lt;/span&gt;
&lt;span class='cm'&gt;     *         (A {@code null} return can also indicate that the map&lt;/span&gt;
&lt;span class='cm'&gt;     *         previously associated {@code null} with {@code key}.)&lt;/span&gt;
&lt;span class='cm'&gt;     * @throws ClassCastException if the specified key cannot be compared&lt;/span&gt;
&lt;span class='cm'&gt;     *         with the keys currently in the map&lt;/span&gt;
&lt;span class='cm'&gt;     * @throws NullPointerException if the specified key is null&lt;/span&gt;
&lt;span class='cm'&gt;     *         and this map uses natural ordering, or its comparator&lt;/span&gt;
&lt;span class='cm'&gt;     *         does not permit null keys&lt;/span&gt;
&lt;span class='cm'&gt;     */&lt;/span&gt;
    &lt;span class='kd'&gt;public&lt;/span&gt; &lt;span class='n'&gt;V&lt;/span&gt; &lt;span class='nf'&gt;put&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;K&lt;/span&gt; &lt;span class='n'&gt;key&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;V&lt;/span&gt; &lt;span class='n'&gt;value&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
        &lt;span class='n'&gt;Entry&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;K&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='n'&gt;V&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;t&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;root&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;t&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='kc'&gt;null&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
            &lt;span class='n'&gt;compare&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;key&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;key&lt;/span&gt;&lt;span class='o'&gt;);&lt;/span&gt; &lt;span class='c1'&gt;// type (and possibly null) check&lt;/span&gt;

            &lt;span class='n'&gt;root&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='n'&gt;Entry&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class='n'&gt;key&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;value&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='kc'&gt;null&lt;/span&gt;&lt;span class='o'&gt;);&lt;/span&gt;
            &lt;span class='n'&gt;size&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt;
            &lt;span class='n'&gt;modCount&lt;/span&gt;&lt;span class='o'&gt;++;&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='kc'&gt;null&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt;
        &lt;span class='o'&gt;}&lt;/span&gt;
        &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;cmp&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt;
        &lt;span class='n'&gt;Entry&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;K&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='n'&gt;V&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;parent&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt;
        &lt;span class='c1'&gt;// split comparator and comparable paths&lt;/span&gt;
        &lt;span class='n'&gt;Comparator&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;?&lt;/span&gt; &lt;span class='kd'&gt;super&lt;/span&gt; &lt;span class='n'&gt;K&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;cpr&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;comparator&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;cpr&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='kc'&gt;null&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
            &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
                &lt;span class='n'&gt;parent&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt;
                &lt;span class='n'&gt;cmp&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;cpr&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;compare&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;key&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;key&lt;/span&gt;&lt;span class='o'&gt;);&lt;/span&gt;
                &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;cmp&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
                    &lt;span class='n'&gt;t&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;left&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt;
                &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='nf'&gt;if&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;cmp&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
                    &lt;span class='n'&gt;t&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;right&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt;
                &lt;span class='k'&gt;else&lt;/span&gt;
                    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;setValue&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;value&lt;/span&gt;&lt;span class='o'&gt;);&lt;/span&gt;
            &lt;span class='o'&gt;}&lt;/span&gt; &lt;span class='k'&gt;while&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;t&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='kc'&gt;null&lt;/span&gt;&lt;span class='o'&gt;);&lt;/span&gt;
        &lt;span class='o'&gt;}&lt;/span&gt;
        &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
            &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;key&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='kc'&gt;null&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
                &lt;span class='k'&gt;throw&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nf'&gt;NullPointerException&lt;/span&gt;&lt;span class='o'&gt;();&lt;/span&gt;
            &lt;span class='n'&gt;Comparable&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;?&lt;/span&gt; &lt;span class='kd'&gt;super&lt;/span&gt; &lt;span class='n'&gt;K&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;k&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;Comparable&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;?&lt;/span&gt; &lt;span class='kd'&gt;super&lt;/span&gt; &lt;span class='n'&gt;K&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;)&lt;/span&gt; &lt;span class='n'&gt;key&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt;
            &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
                &lt;span class='n'&gt;parent&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt;
                &lt;span class='n'&gt;cmp&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;compareTo&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;key&lt;/span&gt;&lt;span class='o'&gt;);&lt;/span&gt;
                &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;cmp&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
                    &lt;span class='n'&gt;t&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;left&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt;
                &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='nf'&gt;if&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;cmp&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
                    &lt;span class='n'&gt;t&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;right&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt;
                &lt;span class='k'&gt;else&lt;/span&gt;
                    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;setValue&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;value&lt;/span&gt;&lt;span class='o'&gt;);&lt;/span&gt;
            &lt;span class='o'&gt;}&lt;/span&gt; &lt;span class='k'&gt;while&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;t&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='kc'&gt;null&lt;/span&gt;&lt;span class='o'&gt;);&lt;/span&gt;
        &lt;span class='o'&gt;}&lt;/span&gt;
        &lt;span class='n'&gt;Entry&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;K&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;&lt;span class='n'&gt;V&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;e&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='n'&gt;Entry&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class='n'&gt;key&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;value&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='n'&gt;parent&lt;/span&gt;&lt;span class='o'&gt;);&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;cmp&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
            &lt;span class='n'&gt;parent&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;left&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;e&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;else&lt;/span&gt;
            &lt;span class='n'&gt;parent&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='na'&gt;right&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;e&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt;
        &lt;span class='n'&gt;fixAfterInsertion&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;e&lt;/span&gt;&lt;span class='o'&gt;);&lt;/span&gt;
        &lt;span class='n'&gt;size&lt;/span&gt;&lt;span class='o'&gt;++;&lt;/span&gt;
        &lt;span class='n'&gt;modCount&lt;/span&gt;&lt;span class='o'&gt;++;&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='kc'&gt;null&lt;/span&gt;&lt;span class='o'&gt;;&lt;/span&gt;
    &lt;span class='o'&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>数据有结构（四）红黑树</title>
   <link href="http://jiaqing.me/tech/2012/04/04/tech-rbt"/>
   <updated>2012-04-04T00:00:00+08:00</updated>
   <id>http://jiaqing.me/tech/2012/04/04/tech-rbt</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>数据有结构（二）二叉查找树</title>
   <link href="http://jiaqing.me/tech/2012/04/03/tech-bst"/>
   <updated>2012-04-03T00:00:00+08:00</updated>
   <id>http://jiaqing.me/tech/2012/04/03/tech-bst</id>
   <content type="html">&lt;p&gt;我们知道，一般有两种结构可以用在做数据索引：哈希和树，两者在查找功能上最显著的一个区别是，哈希只支持恒等查询，而树支持范围查询。二叉查找树（BinarySearchTree or BinarySortTree or BST）就是一个为范围查询设计的树，它是满足如下性质的二叉树或空树：&lt;br /&gt;1. 如果左子树非空，则左子树节点的值都小于根节点&lt;br /&gt;2. 如果右子树非空，则右子树节点的值都大于根节点&lt;br /&gt;3. 左右子树也是一颗二叉查找树&lt;/p&gt;

&lt;p&gt;先定义BST的节点数据结构，其实和上一篇的二叉树结构基本相同，只是增加了一个频率字段，具体请见后续说明。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class='sd'&gt;    BST节点&lt;/span&gt;
&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;BSTNode&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;__init__&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='bp'&gt;self&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
        &lt;span class='bp'&gt;self&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;
        &lt;span class='bp'&gt;self&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;leftNode&lt;/span&gt;
        &lt;span class='bp'&gt;self&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;rightNode&lt;/span&gt;
        &lt;span class='bp'&gt;self&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;freq&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;

    &lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot; 频率递增 &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;freqUp&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='bp'&gt;self&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
        &lt;span class='bp'&gt;self&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;freq&lt;/span&gt; &lt;span class='o'&gt;+=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;
  
    &lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot; 频率递减 &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;freqDown&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='bp'&gt;self&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='bp'&gt;self&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;freq&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='bp'&gt;self&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;freq&lt;/span&gt; &lt;span class='o'&gt;-=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- more --&gt;
&lt;h2 id='1_'&gt;1 插入节点&lt;/h2&gt;

&lt;p&gt;往BST插入节点的算法遵循上述的3点性质。需要注意的是，现实中可能会碰到节点已经存在的情况，所以这里给节点增加一个频率属性，碰到重复节点时就递增该字段。删除时也类似，当频率属性大于零时，就先递减，而不是直接删除。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class='sd'&gt;    插入节点&lt;/span&gt;
&lt;span class='sd'&gt;    node: the BST&lt;/span&gt;
&lt;span class='sd'&gt;    element: new BST node&lt;/span&gt;
&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;insert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='c'&gt;# 如果是空树，直接初始化根节点 &lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;BSTNode&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='c'&gt;# 等于当前节点，累计频率&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;freqUp&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;

        &lt;span class='c'&gt;# 小于当前节点，插入到左子树 &lt;/span&gt;
        &lt;span class='k'&gt;elif&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;insert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;

        &lt;span class='c'&gt;# 大于当前节点，插入到右子树 &lt;/span&gt;
        &lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;insert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='2_'&gt;2 删除节点&lt;/h2&gt;

&lt;p&gt;删除操作应该算是BST中最复杂的操作了，因为删除一个节点的时候，要考虑挂在它下边的左右子树怎么重新排列。这里有几种情况：&lt;br /&gt;1. 没有左右子节点，最简单，直接删除就好了&lt;br /&gt;2. 只有一个左或右节点，直接拿这个节点替代当前节点&lt;br /&gt;3. 存在左右子节点，这里需要拿右节点替代当前节点。另外，如果右节点也是有子节点怎么办呢？一个比较简单的方式是，直接拿右子树的最小节点来替代当前删除的节点，这样删除节点之后仍然是一颗BST。画个图就比较直观了： &lt;center&gt;&lt;img src='http://pic.yupoo.com/asuka4j/CKmy1GTf/medish.jpg' /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class='sd'&gt;    删除节点&lt;/span&gt;
&lt;span class='sd'&gt;    node: the BST&lt;/span&gt;
&lt;span class='sd'&gt;    element: node to delete&lt;/span&gt;
&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;delete&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt;

    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='n'&gt;delete&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='n'&gt;delete&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;freq&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;freqDown&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
        &lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='c'&gt;# 对于存在双子节点的情况，就拿右子树的最小节点来替代当前节点&lt;/span&gt;
            &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
                &lt;span class='n'&gt;minNode&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;getMin&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
                &lt;span class='n'&gt;minNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;
                &lt;span class='n'&gt;minNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;
                &lt;span class='n'&gt;delete&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;minNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
                &lt;span class='n'&gt;node&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;minNode&lt;/span&gt;
            &lt;span class='k'&gt;elif&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
                &lt;span class='n'&gt;node&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;
            &lt;span class='k'&gt;elif&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
                &lt;span class='n'&gt;node&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;
            &lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
                &lt;span class='n'&gt;node&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;

&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class='sd'&gt;    获取BST子树中的最小元素&lt;/span&gt;
&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;getMin&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;getMin&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='3_'&gt;3 查找节点&lt;/h2&gt;

&lt;p&gt;辛辛苦苦构建这颗树，就是用来做范围查询的。目前我们构建的BST已经支持从min到max的范围查询，按照中序遍历可以将结果以升序的方式输出，这样也省去了重排序的步骤。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;\ &lt;/span&gt;
&lt;span class='sd'&gt;    按范围搜索 &lt;/span&gt;
&lt;span class='sd'&gt;    node: BST&lt;/span&gt;
&lt;span class='sd'&gt;    min: min value&lt;/span&gt;
&lt;span class='sd'&gt;    max: max value&lt;/span&gt;
&lt;span class='sd'&gt;    result: search result&lt;/span&gt;
&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;searchII&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nb'&gt;min&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nb'&gt;max&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;result&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt; &lt;span class='ow'&gt;or&lt;/span&gt; &lt;span class='nb'&gt;min&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='nb'&gt;max&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt;
    &lt;span class='c'&gt;# 只要当前元素小于MIN就继续遍历左子树&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='nb'&gt;min&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='n'&gt;searchII&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nb'&gt;min&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nb'&gt;max&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;result&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='c'&gt;# 满足条件就添加&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;=&lt;/span&gt; &lt;span class='nb'&gt;min&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='nb'&gt;max&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='n'&gt;result&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;append&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='c'&gt;# 只要当前元素小于MIN或不超过MAX就继续遍历右子树&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='nb'&gt;min&lt;/span&gt; &lt;span class='ow'&gt;or&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='nb'&gt;max&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='n'&gt;searchII&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nb'&gt;min&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nb'&gt;max&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;result&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='4_'&gt;4 树的退化&lt;/h2&gt;

&lt;p&gt;很完美是不？噢不，可能你也发现了，其实BST是一个静态的结构，树的形状完全依赖于录入元素的顺序。在一些极端情况会导致树长歪，比如我们依次录入的元素是：0、1、2、3、&amp;#8230;1000，生成的BST就退换成一条链表了。这就提现不出二叉检索的优越性了。有什么改良的办法吗？当然有了，既然是为了让BST一直保持平衡，那就在插入和删除节点的时候做控制，保证每次修改之后BST一直处于平衡状态。请见下一篇&lt;a href='http://jiaqing.me/'&gt;平衡二叉树&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>数据有结构（三）平衡二叉树</title>
   <link href="http://jiaqing.me/tech/2012/04/02/tech-avl"/>
   <updated>2012-04-02T00:00:00+08:00</updated>
   <id>http://jiaqing.me/tech/2012/04/02/tech-avl</id>
   <content type="html">&lt;p&gt;平衡二叉树是一种绝对平衡的BST，它规定所有节点的左右子树高度相差不能大于1。这就要求每次新增、删除节点时，都需要重新计算左右子树树高，如果树高超过1就需要做节点的旋转，让它恢复到平衡状态。旋转方式全部四种。&lt;/p&gt;

&lt;h2 id='id1'&gt;左左旋转&lt;/h2&gt;
&lt;center&gt;&lt;img src='http://pic.yupoo.com/asuka4j/CKuG9myB/medish.jpg' /&gt;&lt;/center&gt;
&lt;p&gt;如果由于往node.leftNode.leftNode插入新节点而导致不平衡，这时需要对node节点做左旋转。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class='sd'&gt;    左左旋转&lt;/span&gt;
&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;rotateLL&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='n'&gt;top&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='c'&gt;# 当前节点的左节点升级为top&lt;/span&gt;
    &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;top&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='c'&gt;# （如果有）top的右节点变为当前节点的左节点&lt;/span&gt;
    &lt;span class='n'&gt;top&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt; &lt;span class='c'&gt;# 当前节点变为top的右节点&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;top&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='id2'&gt;右右旋转&lt;/h2&gt;
&lt;center&gt;&lt;img src='http://pic.yupoo.com/asuka4j/CKu5rbm4/medish.jpg' /&gt;&lt;/center&gt;
&lt;p&gt;如果由于往node.rightNode.rightNode插入新节点而导致不平衡，这时需要对node节点做右旋转。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class='sd'&gt;    右右旋转&lt;/span&gt;
&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;rotateRR&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='n'&gt;top&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;
    &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;top&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;
    &lt;span class='n'&gt;top&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;top&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='id3'&gt;左右旋转&lt;/h2&gt;
&lt;center&gt;&lt;img src='http://pic.yupoo.com/asuka4j/CKuGdOZn/medish.jpg' /&gt;&lt;/center&gt;
&lt;p&gt;如果是往node.leftNode.rightNode插入新节点导致不平衡，需要先对node.leftNode做右旋转，再对node自己做左旋转。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class='sd'&gt;    左右旋转&lt;/span&gt;
&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;rotateLR&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;rotateRR&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;rotateLL&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='id4'&gt;右左旋转&lt;/h2&gt;
&lt;center&gt;&lt;img src='http://pic.yupoo.com/asuka4j/CKuG55NF/medish.jpg' /&gt;&lt;/center&gt;
&lt;p&gt;如果往node.rightNode.leftNode插入新节点导致不平衡，需要先对node.rightNode做左旋转，再对node自己做右旋转。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class='sd'&gt;    右左旋转&lt;/span&gt;
&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;rotateRL&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;rotateLL&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;rotateRR&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='id5'&gt;插入节点&lt;/h2&gt;

&lt;p&gt;有了上述四种基础旋转操作，就可以在插入、删除节点时应用上了。插入节点的步骤与BST一直，通过递归地与当前节点比对大小找到最终位置然后插入。不同点在于每次插入之后需要重新计算树高，如果不平衡就通过四种旋转调整到平衡状态。 为了避免每次递归都重新计算左右子树的树高，这里还用到一个小伎俩，就是将当前树高也作为参数递归传递下去，由每层节点累计（当前值+1）。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class='sd'&gt;    插入新节点&lt;/span&gt;
&lt;span class='sd'&gt;    node: the AVL&lt;/span&gt;
&lt;span class='sd'&gt;    element : the new element&lt;/span&gt;
&lt;span class='sd'&gt;    currentDepth: current node&amp;#39;s depth&lt;/span&gt;
&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;insert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;currentDepth&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='c'&gt;# 在最末端新增节点&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='n'&gt;currentDepth&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;AVLNode&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='n'&gt;leftDepth&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
        &lt;span class='n'&gt;rightDepth&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;

        &lt;span class='c'&gt;# 1. 递归添加节点&lt;/span&gt;
        &lt;span class='c'&gt;# 1.1 如果小于当前节点则遍历左子树&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='c'&gt;# 新增节点做为当前的左节点&lt;/span&gt;
            &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;insert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;leftDepth&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;
        &lt;span class='c'&gt;# 1.2 如果大于当前节点则遍历右子树&lt;/span&gt;
        &lt;span class='k'&gt;elif&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='c'&gt;# 新增节点作为当前的右节点&lt;/span&gt;
            &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;insert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;rightDepth&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;
        &lt;span class='c'&gt;# 1.3 如果已经存在了只累计频率&lt;/span&gt;
        &lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;freqUp&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;

        &lt;span class='c'&gt;# 2 累计树高&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;leftDepth&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;rightDepth&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='n'&gt;currentDepth&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;leftDepth&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;
        &lt;span class='k'&gt;elif&lt;/span&gt; &lt;span class='n'&gt;rightDepth&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;leftDepth&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='n'&gt;currentDepth&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;rightDepth&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;
            

        &lt;span class='c'&gt;# 3. 处理旋转&lt;/span&gt;
        &lt;span class='c'&gt;# 3.1 左子树比右子树高出2&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;leftDepth&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='n'&gt;rightDepth&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='c'&gt;# 3.1.1 在左节点左边&lt;/span&gt;
            &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
                &lt;span class='n'&gt;roteteLL&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
            &lt;span class='c'&gt;# 3.1.2 在左节点右边&lt;/span&gt;
            &lt;span class='k'&gt;elif&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
                &lt;span class='n'&gt;rotateLR&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='c'&gt;# 3.2 右子树比左子树高出2&lt;/span&gt;
        &lt;span class='k'&gt;elif&lt;/span&gt; &lt;span class='n'&gt;rightDepth&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='n'&gt;leftDepth&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='c'&gt;# 3.2.3 在右节点右边&lt;/span&gt;
            &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
                &lt;span class='n'&gt;rotateRR&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
            &lt;span class='c'&gt;# 3.2.4 在右节点左边&lt;/span&gt;
            &lt;span class='k'&gt;elif&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
                &lt;span class='n'&gt;rotateRL&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先简单做个测试，随机往AVL插入99个节点，然后中序遍历，看输出的结果是否按从小到大递增。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='n'&gt;avl&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;

&lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
&lt;span class='k'&gt;while&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;99&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
    &lt;span class='n'&gt;avl&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;AVL&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;insert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;avl&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;random&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;randint&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;999&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='o'&gt;+=&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;

&lt;span class='n'&gt;BinaryTree&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;inOrder&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;avl&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot; 屏幕输出： &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='mi'&gt;6&lt;/span&gt; &lt;span class='mi'&gt;14&lt;/span&gt; &lt;span class='mi'&gt;31&lt;/span&gt; &lt;span class='mi'&gt;38&lt;/span&gt; &lt;span class='mi'&gt;41&lt;/span&gt; &lt;span class='mi'&gt;46&lt;/span&gt; &lt;span class='mi'&gt;57&lt;/span&gt; &lt;span class='mi'&gt;60&lt;/span&gt; &lt;span class='mi'&gt;74&lt;/span&gt; &lt;span class='mi'&gt;75&lt;/span&gt; &lt;span class='mi'&gt;130&lt;/span&gt; &lt;span class='mi'&gt;133&lt;/span&gt; &lt;span class='mi'&gt;135&lt;/span&gt; &lt;span class='mi'&gt;140&lt;/span&gt; &lt;span class='mi'&gt;189&lt;/span&gt; &lt;span class='mi'&gt;196&lt;/span&gt; &lt;span class='mi'&gt;214&lt;/span&gt; &lt;span class='mi'&gt;218&lt;/span&gt; &lt;span class='mi'&gt;244&lt;/span&gt; &lt;span class='mi'&gt;249&lt;/span&gt; &lt;span class='mi'&gt;265&lt;/span&gt; &lt;span class='mi'&gt;271&lt;/span&gt; &lt;span class='mi'&gt;273&lt;/span&gt; &lt;span class='mi'&gt;290&lt;/span&gt; &lt;span class='mi'&gt;298&lt;/span&gt; &lt;span class='mi'&gt;302&lt;/span&gt; &lt;span class='mi'&gt;304&lt;/span&gt; &lt;span class='mi'&gt;337&lt;/span&gt; &lt;span class='mi'&gt;338&lt;/span&gt; &lt;span class='mi'&gt;361&lt;/span&gt; &lt;span class='mi'&gt;371&lt;/span&gt; &lt;span class='mi'&gt;398&lt;/span&gt; &lt;span class='mi'&gt;416&lt;/span&gt; &lt;span class='mi'&gt;428&lt;/span&gt; &lt;span class='mi'&gt;438&lt;/span&gt; &lt;span class='mi'&gt;449&lt;/span&gt; &lt;span class='mi'&gt;457&lt;/span&gt; &lt;span class='mi'&gt;465&lt;/span&gt; &lt;span class='mi'&gt;467&lt;/span&gt; &lt;span class='mi'&gt;471&lt;/span&gt; &lt;span class='mi'&gt;485&lt;/span&gt; &lt;span class='mi'&gt;486&lt;/span&gt; &lt;span class='mi'&gt;502&lt;/span&gt; &lt;span class='mi'&gt;506&lt;/span&gt; &lt;span class='mi'&gt;507&lt;/span&gt; &lt;span class='mi'&gt;513&lt;/span&gt; &lt;span class='mi'&gt;515&lt;/span&gt; &lt;span class='mi'&gt;558&lt;/span&gt; &lt;span class='mi'&gt;561&lt;/span&gt; &lt;span class='mi'&gt;565&lt;/span&gt; &lt;span class='mi'&gt;567&lt;/span&gt; &lt;span class='mi'&gt;574&lt;/span&gt; &lt;span class='mi'&gt;578&lt;/span&gt; &lt;span class='mi'&gt;579&lt;/span&gt; &lt;span class='mi'&gt;585&lt;/span&gt; &lt;span class='mi'&gt;608&lt;/span&gt; &lt;span class='mi'&gt;621&lt;/span&gt; &lt;span class='mi'&gt;647&lt;/span&gt; &lt;span class='mi'&gt;658&lt;/span&gt; &lt;span class='mi'&gt;691&lt;/span&gt; &lt;span class='mi'&gt;693&lt;/span&gt; &lt;span class='mi'&gt;716&lt;/span&gt; &lt;span class='mi'&gt;719&lt;/span&gt; &lt;span class='mi'&gt;724&lt;/span&gt; &lt;span class='mi'&gt;728&lt;/span&gt; &lt;span class='mi'&gt;737&lt;/span&gt; &lt;span class='mi'&gt;748&lt;/span&gt; &lt;span class='mi'&gt;764&lt;/span&gt; &lt;span class='mi'&gt;765&lt;/span&gt; &lt;span class='mi'&gt;770&lt;/span&gt; &lt;span class='mi'&gt;784&lt;/span&gt; &lt;span class='mi'&gt;816&lt;/span&gt; &lt;span class='mi'&gt;838&lt;/span&gt; &lt;span class='mi'&gt;842&lt;/span&gt; &lt;span class='mi'&gt;869&lt;/span&gt; &lt;span class='mi'&gt;881&lt;/span&gt; &lt;span class='mi'&gt;882&lt;/span&gt; &lt;span class='mi'&gt;884&lt;/span&gt; &lt;span class='mi'&gt;891&lt;/span&gt; &lt;span class='mi'&gt;906&lt;/span&gt; &lt;span class='mi'&gt;913&lt;/span&gt; &lt;span class='mi'&gt;924&lt;/span&gt; &lt;span class='mi'&gt;931&lt;/span&gt; &lt;span class='mi'&gt;934&lt;/span&gt; &lt;span class='mi'&gt;939&lt;/span&gt; &lt;span class='mi'&gt;940&lt;/span&gt; &lt;span class='mi'&gt;966&lt;/span&gt; &lt;span class='mi'&gt;971&lt;/span&gt; &lt;span class='mi'&gt;974&lt;/span&gt; &lt;span class='mi'&gt;983&lt;/span&gt; &lt;span class='mi'&gt;986&lt;/span&gt; &lt;span class='mi'&gt;995&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='id6'&gt;删除节点&lt;/h2&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class='sd'&gt;    删除节点&lt;/span&gt;
&lt;span class='sd'&gt;    TODO: 这段代码还没经过测试，最后一段的判断语句写的有点挫&lt;/span&gt;
&lt;span class='sd'&gt;    node: the AVL&lt;/span&gt;
&lt;span class='sd'&gt;    element: delete element&lt;/span&gt;
&lt;span class='sd'&gt;    currentDepth: current tree depth&lt;/span&gt;
&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;    
&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;delete&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;currentDepth&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='c'&gt;# 在最末端新增节点&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='n'&gt;currentDepth&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;AVLNode&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='n'&gt;leftDepth&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
        &lt;span class='n'&gt;rightDepth&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;

        &lt;span class='c'&gt;# 1. 递归删除节点&lt;/span&gt;
        &lt;span class='c'&gt;# 1.1 如果小于当前节点则遍历左子树&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='c'&gt;# 新增节点做为当前的左节点&lt;/span&gt;
            &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;delete&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;leftDepth&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;
        &lt;span class='c'&gt;# 1.2 如果大于当前节点则遍历右子树&lt;/span&gt;
        &lt;span class='k'&gt;elif&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='c'&gt;# 新增节点作为当前的右节点&lt;/span&gt;
            &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;delete&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;rightDepth&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;
        &lt;span class='c'&gt;# 1.3 如果已经存在了先递减频率，另外需要考虑下面还有子节点的情况&lt;/span&gt;
        &lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;freq&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
                &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;freqDown&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
                &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;
            &lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
                &lt;span class='c'&gt;# 1.3.1 没有子节点直接删除&lt;/span&gt;
                &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
                    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;delete&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;currentDepth&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
                &lt;span class='c'&gt;# 1.3.2 存在左右子节点需要拿右节点最小值替代当前节点&lt;/span&gt;
                &lt;span class='k'&gt;elif&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='err'&gt;！&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
                    &lt;span class='c'&gt;# TODO&lt;/span&gt;
                    &lt;span class='k'&gt;pass&lt;/span&gt;
                &lt;span class='c'&gt;# 1.3.3 存在单个节点直接替换当前节点&lt;/span&gt;
                &lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
                    &lt;span class='c'&gt;# TODO&lt;/span&gt;
                    &lt;span class='k'&gt;pass&lt;/span&gt;

        &lt;span class='c'&gt;# 2 累计树高&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;leftDepth&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;rightDepth&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='n'&gt;currentDepth&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;leftDepth&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;
        &lt;span class='k'&gt;elif&lt;/span&gt; &lt;span class='n'&gt;rightDepth&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;leftDepth&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='n'&gt;currentDepth&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;rightDepth&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;
            

        &lt;span class='c'&gt;# 3. 处理旋转（与插入节点的步骤相反，实现不是很干脆，讲究..）&lt;/span&gt;
        &lt;span class='c'&gt;# 3.1 左子树比右子树高出2&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='nb'&gt;abs&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;leftDepth&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='nb'&gt;abs&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;rightDepth&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='c'&gt;# 3.2.3 在右节点左边&lt;/span&gt;
            &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='p'&gt;((&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='ow'&gt;or&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='ow'&gt;not&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;isLeaf&lt;/span&gt;&lt;span class='p'&gt;())):&lt;/span&gt;
                &lt;span class='n'&gt;rotateRL&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
            &lt;span class='c'&gt;# 3.2.4 在右节点左边&lt;/span&gt;
            &lt;span class='k'&gt;elif&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='p'&gt;((&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='ow'&gt;or&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='ow'&gt;not&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;isLeaf&lt;/span&gt;&lt;span class='p'&gt;())):&lt;/span&gt;
                &lt;span class='n'&gt;rotateRR&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    
        &lt;span class='c'&gt;# 3.2 右子树比左子树高出2&lt;/span&gt;
        &lt;span class='k'&gt;elif&lt;/span&gt; &lt;span class='nb'&gt;abs&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;rightDepth&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='nb'&gt;abs&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;leftDepth&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='c'&gt;# 3.1.1 在左节点右边&lt;/span&gt;
            &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='p'&gt;((&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='ow'&gt;or&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='ow'&gt;not&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;isLeaf&lt;/span&gt;&lt;span class='p'&gt;())):&lt;/span&gt;
                &lt;span class='n'&gt;roteteLL&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
            &lt;span class='c'&gt;# 3.1.2 在左节点左边&lt;/span&gt;
            &lt;span class='k'&gt;elif&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='p'&gt;((&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='ow'&gt;or&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='ow'&gt;not&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;isLeaf&lt;/span&gt;&lt;span class='p'&gt;())):&lt;/span&gt;
                &lt;span class='n'&gt;rotateLR&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='id7'&gt;性能对比&lt;/h2&gt;

&lt;p&gt;这里先在本地内存上做下BST和AVL的插入、查询性能对比。分别对BST和AVL顺序插入新节点0-9999，然后按相同的条件进行查询。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='n'&gt;bst&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;
&lt;span class='n'&gt;avl&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;

&lt;span class='k'&gt;print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;datetime&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;datetime&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;now&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt;
&lt;span class='k'&gt;print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;init BST&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
&lt;span class='k'&gt;while&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;19999&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
    &lt;span class='c'&gt;# bst = BST.insert(bst, random.randint(0, 999999))&lt;/span&gt;
    &lt;span class='n'&gt;bst&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;BST&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;insert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;bst&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;+=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;

&lt;span class='k'&gt;print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;datetime&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;datetime&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;now&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt;
&lt;span class='k'&gt;print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;init AVL&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
&lt;span class='k'&gt;while&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;19999&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
    &lt;span class='c'&gt;# avl = AVL.insert(avl, random.randint(0, 999999), 0)&lt;/span&gt;
    &lt;span class='c'&gt;#avl = AVL.insert(avl, random.randint(0, 999999), 0)&lt;/span&gt;
    &lt;span class='n'&gt;avl&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;AVL&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;insert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;avl&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;+=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;

&lt;span class='k'&gt;print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;datetime&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;datetime&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;now&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt;
&lt;span class='k'&gt;print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;bst search begin&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='n'&gt;bstResult&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='mi'&gt;5000&lt;/span&gt;
&lt;span class='n'&gt;BST&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;searchII&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;bst&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;100&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;bstResult&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;BST&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;searchII&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;bst&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;999&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;1800&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;bstResult&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;BST&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;searchII&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;bst&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;65687&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;70000&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;bstResult&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;BST&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;searchII&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;bst&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;9998&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;9999&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;bstResult&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;BST&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;searchII&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;bst&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;4000&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;5000&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;bstResult&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='k'&gt;print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;datetime&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;datetime&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;now&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt;
&lt;span class='k'&gt;print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;avl search begin&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='n'&gt;avlResult&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='mi'&gt;5000&lt;/span&gt;
&lt;span class='n'&gt;BST&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;searchII&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;avl&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;100&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;avlResult&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;BST&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;searchII&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;avl&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;999&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;1800&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;avlResult&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;BST&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;searchII&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;avl&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;6558&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;7000&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;avlResult&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;BST&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;searchII&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;avl&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;9998&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;9999&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;avlResult&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;BST&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;searchII&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;avl&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;4000&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;5000&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;avlResult&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='k'&gt;print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;datetime&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;datetime&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;now&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt;
&lt;span class='k'&gt;print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;end&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot; 屏幕输出 &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='n'&gt;begin&lt;/span&gt;
&lt;span class='mi'&gt;2013&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mo'&gt;03&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;31&lt;/span&gt; &lt;span class='mi'&gt;16&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;08&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;47.545757&lt;/span&gt;
&lt;span class='n'&gt;init&lt;/span&gt; &lt;span class='n'&gt;BST&lt;/span&gt;
&lt;span class='mi'&gt;2013&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mo'&gt;03&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;31&lt;/span&gt; &lt;span class='mi'&gt;16&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;09&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;36.126257&lt;/span&gt;
&lt;span class='n'&gt;init&lt;/span&gt; &lt;span class='n'&gt;AVL&lt;/span&gt;
&lt;span class='mi'&gt;2013&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mo'&gt;03&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;31&lt;/span&gt; &lt;span class='mi'&gt;16&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;24.857230&lt;/span&gt;
&lt;span class='n'&gt;bst&lt;/span&gt; &lt;span class='n'&gt;search&lt;/span&gt; &lt;span class='n'&gt;begin&lt;/span&gt;
&lt;span class='mi'&gt;2013&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mo'&gt;03&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;31&lt;/span&gt; &lt;span class='mi'&gt;16&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;24.889376&lt;/span&gt;
&lt;span class='n'&gt;avl&lt;/span&gt; &lt;span class='n'&gt;search&lt;/span&gt; &lt;span class='n'&gt;begin&lt;/span&gt;
&lt;span class='mi'&gt;2013&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mo'&gt;03&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;31&lt;/span&gt; &lt;span class='mi'&gt;16&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;24.916285&lt;/span&gt;
&lt;span class='n'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;BST插入耗时48.419500秒，AVL插入耗时47.730973秒，BST查询耗时0.32146秒，AVL查询耗时0.26909秒。好吧，数据量太少，差距还不是很明显，下次换到磁盘上试试。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>数据有结构（一）二叉树</title>
   <link href="http://jiaqing.me/tech/2012/04/01/tech-binary-tree"/>
   <updated>2012-04-01T00:00:00+08:00</updated>
   <id>http://jiaqing.me/tech/2012/04/01/tech-binary-tree</id>
   <content type="html">&lt;center&gt;&lt;img src='http://pic.yupoo.com/asuka4j/CKmn5K0g/medish.jpg' /&gt;&lt;/center&gt;
&lt;p&gt;二叉树应该算是‘树’这类数据结构中最为基础的一种。二叉树规定了每个节点最多只能有两个子节点，一般称为左子节点和右子节点（或左孩子和右孩子），并且这两个节点有左右顺序之分，次序不能任意颠倒。如果子节点下边还挂了子节点，可以称它为“子树”。本篇主要讲述二叉树相关的基础算法，正好最近在学习Python，代码就都使用Python表示了。&lt;/p&gt;

&lt;p&gt;先定义二叉树节点的数据结构：一个二叉树节点主要包含其左右子节点的引用，和自身节点携带的信息。如果左右子树都为空，则认为它是一个叶子节点。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class='sd'&gt;    二叉树节点&lt;/span&gt;
&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;BinNode&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;__init__&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='bp'&gt;self&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
        &lt;span class='bp'&gt;self&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt;
        &lt;span class='bp'&gt;self&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;leftNode&lt;/span&gt;
        &lt;span class='bp'&gt;self&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;rightNode&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;isLeaf&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='bp'&gt;self&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='bp'&gt;self&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='bp'&gt;self&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='bp'&gt;True&lt;/span&gt;
        &lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='bp'&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- more --&gt;
&lt;h2 id='1_'&gt;1 前中后序遍历&lt;/h2&gt;

&lt;p&gt;遍历一颗二叉树可以有前、中、后序三种方式。从代码可以看到，三种遍历方式的区别只在于获取自身节点这个语句的位置不同。有时候比较容易混淆前序和中序的顺序，前序是：”中左右“，而中序才是“左中右”。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot; 前序遍历：1. 获取自身节点 2. 前序遍历左子树 3. 前序遍历右子树 &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;preOrder&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;root&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;root&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt;
    &lt;span class='k'&gt;print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;root&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;display&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt;
    &lt;span class='n'&gt;preOrder&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;root&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;preOrder&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;root&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot; 中序遍历：1. 中序遍历左子树 2. 获取自身节点 3. 中序遍历右子树 &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;inOrder&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;root&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;root&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt;
    &lt;span class='n'&gt;inOrder&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;root&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='k'&gt;print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;root&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;display&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt;
    &lt;span class='n'&gt;inOrder&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;root&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;

&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot; 后序遍历：1. 后序遍历左子树 2. 后序遍历右子树 3. 获取自身节点 &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;postOrder&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;root&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;root&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt;
    &lt;span class='n'&gt;postOrder&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;root&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;postOrder&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;root&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='k'&gt;print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;root&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;display&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;三种遍历方式都比较简单，这里额外插播另一种非官方的遍历：如果想按树的层次，逐层往下遍历，该怎么做呢？可以借助一个二维数组来缓存逐层遍历的结果，数组的大小是 &lt;span&gt;（&lt;span /&gt; * 2的“深度-1”次方） * 深度&lt;/span&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot; 逐层遍历 &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;levelOrder&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;level&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;array&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt;
    &lt;span class='n'&gt;array&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;level&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;append&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;level&lt;/span&gt; &lt;span class='o'&gt;+=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;
    &lt;span class='n'&gt;levelOrder&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;level&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;array&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;levelOrder&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;level&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;array&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但这样打印出来的效果还不是一颗树的形状，如果想按树形打印，请见本文的最后一节“打印二叉树”。&lt;/p&gt;

&lt;h2 id='2_'&gt;2 深度计算&lt;/h2&gt;

&lt;p&gt;树的深度取决于左右子树中层次最深的一边，当然，还要算上自己。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class='sd'&gt;    深度计算&lt;/span&gt;
&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;depth&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
    &lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='n'&gt;leftDepth&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;depth&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='n'&gt;rightDepth&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;depth&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;leftDeep&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;=&lt;/span&gt; &lt;span class='n'&gt;rightDeep&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;leftDepth&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;
        &lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;rightDepth&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;类似地，如果想获取一棵树的有效节点总数目，可以这么做：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class='sd'&gt;    获取节点数目&lt;/span&gt;
&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;nodeNumbers&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;nodeNumbers&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;nodeNumbers&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='3_'&gt;3 获取镜像&lt;/h2&gt;

&lt;p&gt;镜像镜像，相当于一面镜子。把二叉树中所有子树做一次左右反转，就得到这棵树的镜像了。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class='sd'&gt;    获取镜像&lt;/span&gt;
&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;mirror&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt;
    &lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;isLeaf&lt;/span&gt;&lt;span class='p'&gt;():&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt;
        &lt;span class='n'&gt;temp&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;
        &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;rightNode&lt;/span&gt;
        &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;temp&lt;/span&gt;
        &lt;span class='n'&gt;mirror&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='n'&gt;mirror&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='4_'&gt;4 判断是否平衡&lt;/h2&gt;

&lt;p&gt;如果二叉树的任意节点的左右子树深度相差不超过1，则认为是平衡二叉树。这里还用到了代码清单2的深度计算方法。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;isBalance&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt; &lt;span class='ow'&gt;or&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;isLeaf&lt;/span&gt;&lt;span class='p'&gt;():&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='bp'&gt;True&lt;/span&gt;

    &lt;span class='n'&gt;leftDepth&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;depth&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;rightDepth&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;depth&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='nb'&gt;abs&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;leftDepth&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='n'&gt;rightDepth&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='bp'&gt;False&lt;/span&gt;

    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;isBalance&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='n'&gt;isBalance&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
                    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述做法比较好理解，但有个缺点，它是自上而下递归判断的，每次递归都要重复计算树高。改良的做法是能在每次递归的时候累计树高，避免重复。这里通过后序遍历的方式递归，从最低端开始判断，同时通过新增的参数currentDepth记录每次递归的树高。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;\ 判断是否平衡 II&lt;/span&gt;
&lt;span class='sd'&gt;    node: 二叉树&lt;/span&gt;
&lt;span class='sd'&gt;    currentDepth: 当前的树高&lt;/span&gt;
&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;isBalanceII&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;currentDepth&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt; &lt;span class='ow'&gt;or&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;isLeaf&lt;/span&gt;&lt;span class='p'&gt;():&lt;/span&gt;
        &lt;span class='n'&gt;currentDepth&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='bp'&gt;True&lt;/span&gt;

    &lt;span class='n'&gt;lDepth&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
    &lt;span class='n'&gt;rDepth&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; 

    &lt;span class='c'&gt;# 从最底层开始往上递归判断&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;isBalanceII&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;lDepth&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='n'&gt;isBalanceII&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;rDepth&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
        &lt;span class='c'&gt;# 相差超过1就不平衡了&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='nb'&gt;abs&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;lDepth&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='n'&gt;rDepth&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='bp'&gt;False&lt;/span&gt;
        &lt;span class='c'&gt;# 否则按照长的那一边累计树高&lt;/span&gt;
        &lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;lDepth&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;=&lt;/span&gt; &lt;span class='n'&gt;rDepth&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
                &lt;span class='n'&gt;currentDepth&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;lDepth&lt;/span&gt;
            &lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
                &lt;span class='n'&gt;currentDepth&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;rDepth&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='bp'&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='5_'&gt;5 子树判断&lt;/h2&gt;

&lt;p&gt;如果可以在树A上找到和树B完全一致的结构，则认为B是A的子树。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class='sd'&gt;    子树判断&lt;/span&gt;
&lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;isSubTree&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;comparedNode&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;comparedNode&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='bp'&gt;True&lt;/span&gt;
    &lt;span class='k'&gt;elif&lt;/span&gt; &lt;span class='n'&gt;comparedNode&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='bp'&gt;None&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='bp'&gt;False&lt;/span&gt;

    &lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot; 从A树找到B树根节点相同的节点 &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;comparedNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;element&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot; 如果不是叶子节点就继续比其子节点 &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;comparedNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;isLeaf&lt;/span&gt;&lt;span class='p'&gt;():&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='bp'&gt;True&lt;/span&gt;
        &lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;isSubTree&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;comparedNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='ow'&gt;and&lt;/span&gt; &lt;span class='n'&gt;isSubTree&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;comparedNode&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;isSubTree&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;leftNode&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;comparedNode&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='ow'&gt;or&lt;/span&gt; &lt;span class='n'&gt;isSubTree&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;node&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;rightNode&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;comparedNode&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='6_'&gt;6 打印二叉树&lt;/h2&gt;

&lt;p&gt;写了好几个算法，最终总要在屏幕上显示出来吧，不然也不知道对错呢。这里先分析下树的显示效果，主要看看父节点和子节点间、左节点和右节点间的位置关系。如下图所示，节点间的关系可以归纳为： &lt;center&gt;&lt;img src='http://pic.yupoo.com/asuka4j/CKmnmDZA/medish.jpg' /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;基于上述分析，我们需要重新设计节点的数据结构，和对应的打印算法：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;    &lt;span class='n'&gt;TODO&lt;/span&gt; &lt;span class='err'&gt;代码调试中&lt;/span&gt;&lt;span class='o'&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>我的家庭数据同步方案</title>
   <link href="http://jiaqing.me/life/2012/03/10/make-personal-data-sync"/>
   <updated>2012-03-10T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2012/03/10/make-personal-data-sync</id>
   <content type="html">&lt;p&gt;
    在当下信息爆炸的时代，个人数据如何高效、可靠地存储也成了一个重要的话题（如何归类是另外一个话题）。
&lt;/p&gt;&lt;p&gt;
    虽然随着云计算的发展和普及，现在已经有不少厂商为个人用户提供了免费、或相对廉价的云存储方案。但就目前而言，这些方案主要还是针对“单个人”的，存储空间也不是完全免费。另外把重要资料放在“别人的服务器上”，多少也有点令人不安。(这不，号称坚不可摧的Chrome浏览器昨天也&lt;a href='http://www.36kr.com/p/89082.html' target='_blank'&gt;被黑客攻破&lt;/a&gt;了，哪天云服务是不是也会被黑？）
&lt;/p&gt;&lt;p&gt;
    权衡之下，我还是采用本地备份的方式来搭建存储服务。主要是借助于开源的版本管理软件&lt;a href='http://baike.baidu.com/view/183128.htm' target='_blank'&gt;SVN&lt;/a&gt;：
&lt;/p&gt;&lt;p&gt;
   &lt;center&gt;&lt;img data-pinit='registered' id='6C590218D93CBB875060F1E82591668E' src='http://m1.img.libdd.com/farm3/255/F607FB1AF2EF54BC75D8DE96A61305FF_500_362.jpg' /&gt;&lt;/center&gt;
&lt;/p&gt;&lt;!-- more --&gt;&lt;p style='text-align :center ;'&gt;
    （use&lt;a href='https://www.lucidchart.com' target='_blank'&gt;Lucidchart&lt;/a&gt; drawing）
&lt;/p&gt;&lt;ul style='list-style-type :disc ;'&gt;
    &lt;li&gt;
        &lt;p&gt;
            从家里的电脑中选一台作为SVN服务器（如上图红色那台），在上面安装SVN服务端（&lt;a href='http://www.visualsvn.com/' target='_blank'&gt;下载&lt;/a&gt;），并根据自己的需求创建相关目录，分配权限。如果没有那么多机器，也可以直接用手头的工作的电脑做服务器，就是需要多占用一些磁盘空间而已。
        &lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;p&gt;
            日常办公、娱乐用的笔记本就作为客户端，利用SVN客户端软件（&lt;a href='http://tortoisesvn.net/downloads.html' target='_blank'&gt;下载&lt;/a&gt;）向服务器获取、提交数据。
        &lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;p&gt;
            如果条件充裕，可以腾出一些移动硬盘的空间作为SVN仓库的备份，比如定期每月一次将SVN仓库备份到移动硬盘上。没错，是备份SVN仓库！这样的好处是任何一个设备坏掉了，都可以通过其他几个设备恢复回来，保证数据不会丢。
        &lt;/p&gt;
    &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
    这个方案的好处：全免费、（相对）安全、存储空间大、（局域网内）速度快。但也有一些缺点：同步数据时服务器必须是开机的（废话..），否则就不能做到随时随地提交了、SVN本身不是面向普通消费者的产品，操作起来可能会不适应。
&lt;/p&gt;&lt;p&gt;
    经过俩人几个月的试用，仓库里总共存储了上百G资料，一般也就每周做一次增量备份，每个月备份一次SVN仓库。如果您比较喜欢自己动手折腾，又能忍受上面提到的缺点的话，不妨一试：）
&lt;/p&gt;&lt;p&gt;
    &lt;br /&gt;
&lt;/p&gt;&lt;p&gt;
    ********************************** 延伸阅读**********************************
&lt;/p&gt;&lt;p&gt;
    网盘是否靠谱：&lt;a href='http://blog.tarwon.com/virtual-disk-game.html/' target='_blank'&gt;网盘骗局&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
    创新的云存储：&lt;a href='http://www.36kr.com/p/89137.html' target='_blank'&gt;挑战Dropbox，创新云存储服务Space Monkey直接把1TB硬盘摆到你家&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
    -EOF-
&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>JeffDean谈Google研发</title>
   <link href="http://jiaqing.me/tech/2012/03/05/tech-jeff-dean-talk-about-google"/>
   <updated>2012-03-05T00:00:00+08:00</updated>
   <id>http://jiaqing.me/tech/2012/03/05/tech-jeff-dean-talk-about-google</id>
   <content type="html">&lt;p&gt;
    2010年（没错，我今天才知道..）Google的Jeff Dean曾在Stanford做了一次&lt;a href='http://www.stanford.edu/class/ee380/Abstracts/101110.html' target='_blank'&gt;演讲&lt;/a&gt;，主题是关于Google从1999到2010这十年间的架构发展以及其中的经验教训。整个演讲非常有料，PPT也足足有103页。在细读两遍后，这里主要摘录下其中的一些要点。（在YouTube上可以找到&lt;a href='http://www.youtube.com/watch?v=modXC5IWTJI' target='_blank'&gt;演讲录像&lt;/a&gt;，可能需要您先翻一下墙）
&lt;/p&gt;&lt;p&gt;
    &lt;strong&gt;Part I ： Evolution of various system at Google&lt;/strong&gt;
&lt;/p&gt;&lt;p&gt;
    在十年的发展过程中，Google索引的文档数量增长了1000倍，平均查询速度提高了5倍，更新上线速度提高了5万倍，服务器规模增加了1000倍。在这期间总共做了7次重大升级（没说具体哪7次），而且都是在用户不知不觉间完成的。
&lt;/p&gt;&lt;p&gt;
    &lt;strong&gt;1) 97&amp;#39; Searching Systems:&lt;/strong&gt;
&lt;/p&gt;&lt;p&gt;
    &lt;center&gt;&lt;img data-pinit='registered' id='3A44CCEE9E5667363B943EC921AFFB6D' src='http://m3.img.libdd.com/farm3/71/478B9B4EFCABB77AA51C6A6F0CB8B747_500_268.jpg' /&gt;&lt;/center&gt;
&lt;/p&gt;&lt;!-- more --&gt;&lt;p&gt;
    当时还在实验室时期的搜索系统架构还比较简单，主要是将索引和网页具体内容分开部署：
&lt;/p&gt;&lt;p&gt;
    Index servers：按docid做sharding，执行query的查询并返回排好序的&amp;lt;docid, score&amp;gt;对列表，耗时是 O（#queries * #docs in index)。每个shard也可以有多份replicated以提升系统容量。
&lt;/p&gt;&lt;p&gt;
    doc servers：也是按docid做sharding，通过参数（docid，query）生成（网页标题，网页片段）。通过docid可以精确获取一份网页。这里的耗时是 O（#queries）
&lt;/p&gt;&lt;p&gt;
    &lt;strong&gt;2) 99&amp;#39; Searching Systems:&lt;/strong&gt;
&lt;/p&gt;&lt;p&gt;
    &lt;center&gt;&lt;img data-pinit='registered' id='ABA4CCF063782070248753DA01A52A77' src='http://m3.img.libdd.com/farm3/176/F947263FC20FEEB7DED1E794828352B0_500_370.jpg' /&gt;&lt;/center&gt;
&lt;/p&gt;&lt;p&gt;
    这个版本最大的改进在于引入了缓存，并且索引和网页库形成了完善的矩阵模式。
&lt;/p&gt;&lt;p&gt;
    Cache servers ：索引和网页片段都可能被缓存，缓存的命中率大约为30~60%，这取决于索引更新频率、组合条件的流量、个性化程度等条件。增加缓存后，系统的性能得到了显著的提升，但也带来了一些问题，比如在索引更新或缓存刷新的时候会有较大的延迟。
&lt;/p&gt;&lt;p&gt;
    &lt;strong&gt;3) 98&amp;#39;~99&amp;#39; Indexing:&lt;/strong&gt;
&lt;/p&gt;&lt;p&gt;
    在前期的网页搜索中，设计的重点和难点主要是在索引服务上。这也是最容易出问题的地方。由于Google提倡购买最廉价的设备（廉价不等于最差），这些设备的磁盘、内存经常出错，从而影响到搜索的准确度。这也对工程师们提出了更高的要求，设计的程序需要考虑到底层的各种容错机制。
&lt;/p&gt;&lt;p&gt;
    &lt;strong&gt;4) 00&amp;#39; Data Center Maintain:&lt;/strong&gt;
&lt;/p&gt;&lt;p&gt;
    Google的工程师直接参与到IDC的维护中，由于当时的服务器托管商是按照机房面积计费的，于是Google把服务器堆地严严实实，甚至需要自己增加电扇去辅助散热。期间由于很多托管商的相继倒闭，工程师还需要经常给服务器挪窝，这也练就了很多组建机房的技巧，比如按机柜安放服务器组，这样在搬迁时就可以将机柜整个抗走。
&lt;/p&gt;&lt;p&gt;
    &lt;strong&gt;5) 99&amp;#39;~01&amp;#39; Capacity Increasing:&lt;/strong&gt;
&lt;/p&gt;&lt;p&gt;
    随着Google越来越被用户所接受，其索引数量和查询容量都在持续增长。索引的网页从50M增长到1000M，流量也维持着每月20%的增量。新增加的合作伙伴有时也会带来流量的陡增，比如00&amp;#39;接入Yahoo!，当晚的流量就翻了一倍。
&lt;/p&gt;&lt;p&gt;
    索引服务的性能一直被列为重中之重，通常是不断地部署新服务器来扩容。直到有一天，工程师发现矩阵中所有服务器的内存总量已经足以放得下整个索引，于是乎又有了一次架构改造：
&lt;/p&gt;&lt;p&gt;
    &lt;strong&gt;6) 01&amp;#39; In-Memory Index Systems:&lt;/strong&gt;
&lt;/p&gt;&lt;p&gt;
    &lt;center&gt;&lt;img data-pinit='registered' id='4954FF5A3C32DEF4E07048706F0BC9C1' src='http://m1.img.libdd.com/farm3/210/EA04E46290E133131F16685EE62B09D2_500_391.jpg' /&gt;&lt;/center&gt;
&lt;/p&gt;&lt;p&gt;
    这个版本的架构中索引任然被划分为多个shard，每个shard中有一个节点专门负责负载均衡和调度，索引都存放在服务器的内存中。改造后系统的吞吐量大增、查询延迟骤减，但系统可用性降低了，因为单个节点是没有replicate的，单台宕机就会影响查询。
&lt;/p&gt;&lt;p&gt;
    另外，当时的Google也经常面临宕机的挑战：因为每个请求都会分派给上千台服务器处理再合并，一个请求如果能把一台服务器搞挂，就由可能搞挂全部服务器。针对这个问题，Canary Requests方案诞生了：系统接到请求后先给一台服务器发出试探请求，如果RPC处理成功，则继续下一步处理，如果RPC失败，则尝试其他服务器，如果连续失败K次，则放弃对这个请求的处理。
&lt;/p&gt;&lt;p&gt;
    &lt;strong&gt;7) 04&amp;#39; QueryServingSystem:&lt;/strong&gt;
&lt;/p&gt;&lt;p&gt;
    &lt;center&gt;&lt;img data-pinit='registered' id='40E11546370B7B1A921387D2761A89A9' src='http://m2.img.libdd.com/farm3/5/928FCCEB26C60981C07611B594DE7805_500_372.jpg' /&gt;&lt;/center&gt;
&lt;/p&gt;&lt;p&gt;
    04&amp;#39;Google已经组建了自己的IDC，机器数量也比较充足了。前端服务器被拆分成多层树状结构，叶子节点同时处理索引和网页
&lt;/p&gt;&lt;p&gt;
    。并通过repository manager的统一控制，做到了索引的增量更新，更新时不影响用户正常使用。
&lt;/p&gt;&lt;p&gt;
    在这个版本中开始抽象系统的架构概念，如repository、document、attachments、scoring functions等。
&lt;/p&gt;&lt;p&gt;
    系统能够比较容易地支持小流量实验。通过GFS等基础设施地良好支持，系统的性能也有了显著改善。
&lt;/p&gt;&lt;p&gt;
    ...
&lt;/p&gt;&lt;p&gt;
    &lt;strong&gt;Part II ：Techniques for building large-scale systems&lt;/strong&gt;
&lt;/p&gt;&lt;p&gt;
    个人觉得这第二部分才是Jeff这次演讲的精华部分，都是关于large-scale systems的设计经验。当然，纸上得来终究浅，能否领悟到要点，还是得亲自实践才行。
&lt;/p&gt;&lt;p&gt;
    &lt;strong&gt;1) Many Internal Services:&lt;/strong&gt;
&lt;/p&gt;&lt;p&gt;
    采用面向服务架构（&lt;a href='http://baike.baidu.com/view/6545280.htm' target='_blank'&gt;SOA&lt;/a&gt;），将大系统拆分成多个独立的服务。服务接口尽量简单明了，并且采用一致的契约。考虑通用契约可能会在开发阶段增加一定的工作量，但对日后服务版本升级时的测试、部署工作都会更便利。面向服务的另一个好处是开发周期的解耦，各个开发组承担相对独立的子系统维护工作，从而也便于开发组之间的跨地域合作。
&lt;/p&gt;&lt;p&gt;
    （题外话，前阵子Amazon前员工Steve Yegge也曾在&lt;a href='http://www.mysqlops.com/2011/11/03/stevey.html' target='_blank'&gt;大篇幅的吐槽&lt;/a&gt;中指出前CEO&lt;a href='http://en.wikipedia.org/wiki/Jeff_Bezos' target='_blank'&gt;Jeff Bezos&lt;/a&gt;在好几年前就提出“一切皆服务”的设计理念。可见Bezos的高瞻远瞩）
&lt;/p&gt;&lt;p&gt;
    &lt;strong&gt;2) Designing Efficient Systems:&lt;/strong&gt;
&lt;/p&gt;&lt;p&gt;
    设计系统时，不应该模糊地说做到“高性能”。应该以实际情况/数据为基础，指出具体是“哪里高效”，以及“怎么做到高效”。能在构建系统之前准确地估算这些数字，也是一项不可或缺的架构能力。
&lt;/p&gt;&lt;p&gt;
    &lt;strong&gt;3) Numbers Everyone Should Know:&lt;/strong&gt;
&lt;/p&gt;&lt;p&gt;
    作为系统架构师应该对于各种硬件的性能指标了然于心，以数据为基础去分析系统。
&lt;/p&gt;&lt;p&gt;
    &lt;center&gt;&lt;img data-pinit='registered' id='87E5F92212F0A9B8429AFFD02E571804' src='http://m2.img.libdd.com/farm3/243/A1A54F51EEE5E521FA49804C33F384F3_500_284.jpg' /&gt;&lt;/center&gt;
&lt;/p&gt;&lt;p&gt;
    &lt;strong&gt;5) Back of the Envelope Calculations:&lt;/strong&gt;
&lt;/p&gt;&lt;p&gt;
    老外比较崇尚这种信封背后的计算，即在判断一些指标时，先自己做下简单估算。比如需要估算一个含30个缩略图的result页的生成时间，Jeff是这样做的：
&lt;/p&gt;&lt;p&gt;
    方案1：串行读，假设每个缩略图256K，即耗时= 10ms/seek + 256K read  +  30 * 256K / 30MB/s = 560ms
&lt;/p&gt;&lt;p&gt;
    方案2：并行读，耗时= 10ms/seek + 256K read / 30MB/s = 18ms
&lt;/p&gt;&lt;p&gt;
    当然，这是忽略了缓存、缩略图预处理等因素，实际情况要复杂一些。采用这种方式做系统评估是最靠谱的。
&lt;/p&gt;&lt;p&gt;
    以前双十一、双十二大促时，对系统容量的估算基本上都是直接x2、x3地往上堆机器，确实是不太科学的。为什么流量翻倍，机器就一定要翻倍？原本的集群是否已经达到容量上限？容量的瓶颈是哪个点、通过计算之后具体值是多少？简单的翻倍扩容是否有其它隐患，如导致前端负载均衡爆掉、数据库连接数爆掉等等。
&lt;/p&gt;&lt;p&gt;
    &lt;strong&gt;6) Know Your Basic Building Blocks:&lt;/strong&gt;
&lt;/p&gt;&lt;p&gt;
    在设计系统之前必须对公司的基础设施了如指掌，比如核心代码库、基础数据结构、底层框架、服务等。不只停留在能使用接口的层面，还要明白其实现原理。在次基础之上才有可能设计出一个靠谱的系统。
&lt;/p&gt;&lt;p&gt;
    从另一个角度理解，公司内部是需要一套完善的KM（知识管理）体系的，如何让新入职的架构师、部门级的架构师快速、全面地了解整套架构体系，也是一个挑战。
&lt;/p&gt;&lt;p&gt;
    &lt;strong&gt;7) Designing &amp;amp; Building Infrastructure:&lt;/strong&gt;
&lt;/p&gt;&lt;p&gt;
    不要只顾及自己眼前的问题，而是同时考虑到大家都可能遇到的问题，并从这个层面着手考虑解决方案。另外也不要考虑过头，想要满足全部的需求是非常困难的，一般以能满足最大客户为标准就OK了。与其让所有人都不满意，不如满足其中一小部分。
&lt;/p&gt;&lt;p&gt;
    &lt;strong&gt;8) Design for Growth:&lt;/strong&gt;
&lt;/p&gt;&lt;p&gt;
    设计是充分考虑到日后的增量，以及可能增加的需求。考虑增量的范围以5倍~50倍为佳，如果超过100倍，那就不是优化了，而是整个重写。
&lt;/p&gt;&lt;p&gt;
    Pattern: Single Master, 1000s of Workers:
&lt;/p&gt;&lt;p&gt;
    &lt;center&gt;&lt;img data-pinit='registered' id='1C55875986FC51AD528D9ABCCD35E1B7' src='http://m3.img.libdd.com/farm3/196/90DB59EB91453A83303D53D17FF9DBC4_500_180.jpg' /&gt;&lt;/center&gt;
&lt;/p&gt;&lt;p&gt;
    Jeff貌似很喜欢系统中有一个master。master负责全局的控制，如负载均衡、请求分配、故障切换等，worker负责具体任务。这里的要领是，要保证master尽量少地和client接触，像具体的请求处理、大数据的传输，都是client直接调用worker，不经过master。另外，master可以做热备以增加可用性。
&lt;/p&gt;&lt;p&gt;
    Pattern：Tree Distribution of Requests
&lt;/p&gt;&lt;p&gt;
    &lt;center&gt;&lt;img data-pinit='registered' id='67498FD8675EBA71CC7A3BF1026FA2C7' src='http://m1.img.libdd.com/farm3/48/3E42AEB2743FF317C9E10FFFEA601B30_498_180.JPEG' /&gt;&lt;/center&gt;
&lt;/p&gt;&lt;p&gt;
    Jeff的另一个喜好是通过树形结构分散系统压力，讲一个请求分散到N个叶子节点中处理，再汇总。但这个模式有个隐患，当叶子节点太多时，root的网卡会被撑爆、导致丢包，成为瓶颈。解决办法是设计多级root，比如下图的设计，由parent分管叶子节点：
&lt;/p&gt;&lt;p&gt;
    &lt;center&gt;&lt;img data-pinit='registered' id='46B8B774F0FA20BAE6E8320FF4F99955' src='http://m1.img.libdd.com/farm3/76/4BEA6568944AF82A924C9487DEE5BA4C_500_210.jpg' /&gt;&lt;/center&gt;
&lt;/p&gt;&lt;p&gt;
    Pattern: Backup Requests to Minimize Latency
&lt;/p&gt;&lt;p&gt;
    通常将任务拆分成N多子任务（比如上千个）之后，任务总体完成的时间就变得不可控了--因为总有那么几个任务在拖后腿。应对的办法就是赛跑：给慢任务多起几个task，以最快完成的那个task为准。
&lt;/p&gt;&lt;p&gt;
    先关摘录就先到这里了，理解有误的地方请不吝指正，感谢 :）&lt;br /&gt;
&lt;/p&gt;&lt;p&gt;
    ********************************** 延伸阅读**********************************
&lt;/p&gt;&lt;p&gt;
    1.&lt;a href='http://www.slideshare.net/frankcai/6-dean-google' target='_blank'&gt;Handling Large Datasets at Google: Current Systems and Future Directions&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
    2.&lt;a href='http://www.slideshare.net/longhao/dean-keynote-ladis2009' target='_blank'&gt;Designs, Lessons and Advice from Building Large Distributed Systems&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
    -EOF-
&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>记忆：ACG续二</title>
   <link href="http://jiaqing.me/life/2012/02/04/memory-acg-3"/>
   <updated>2012-02-04T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2012/02/04/memory-acg-3</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>记忆：ACG续</title>
   <link href="http://jiaqing.me/life/2012/02/03/memory-acg-2"/>
   <updated>2012-02-03T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2012/02/03/memory-acg-2</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>记忆：ACG</title>
   <link href="http://jiaqing.me/life/2012/02/02/memory-acg"/>
   <updated>2012-02-02T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2012/02/02/memory-acg</id>
   <content type="html">&lt;p&gt;
    Animation、Comic、Game，构成了这个词「ACG」，OTAKU们的挚爱。现在“宅男”（OTAKU）被用烂了。私以为，如果不沉迷过一段时间的ACG，只是一味地窝在电脑前刷微博，是称不上“宅男”的，顶多算只“网虫”（嗯，在我的印象里，宅男比网虫要高尚那么一点点）。其实现在的我对ACG已经不感冒了，只是觉得曾经经历过的某些人某些事必须记录下来，所以这一篇看起来倒是像极了我的风流往事回忆录。
&lt;/p&gt;&lt;p&gt;
    &lt;strong&gt;Animation&lt;/strong&gt;
&lt;/p&gt;&lt;p&gt;
    &lt;strong&gt;Comic&lt;/strong&gt;
&lt;/p&gt;&lt;p&gt;
    自从有了电脑，有了网络，我对漫画就几乎完全不感冒了。如果不是特别在意画风、不是特别追新，为什么要苦苦对着屏幕看人家copy下来的黑白纸张呢？但有两部，确切的说是两位漫画家，不得不提。一位是藤子·F·不二雄（其实是&lt;a href='http://hi.baidu.com/spring__900225/item/90c443db038846ef54347f56' target='_blank'&gt;两个人&lt;/a&gt;），和他的「哆啦a梦」，一位是鸟山·明，和他的「龙珠」。一直佩服藤子君的想象力，他笔下的很多创意拿到现在来看也是相当超前的，而且是“很多”。哆啦a梦带给我的不仅仅是想象力，还有一种温暖的感觉：每当周末写完作业，就可以赖在沙发上翻看大长篇。我喜欢大长篇而不是短篇，主要是大长篇相对有“内涵”一点，通常是一个充满期待的开篇，接着一个不可思议的遭遇，然后是引引入胜的剧情，最后大熊君们通过团结一致的友情赢得大团圆，并送走远方的朋友回到现实生活。记得每部大长篇在高潮部分都配有一首歌，不过由于是印在纸张上的关系，体验不到。其实还有另一种温暖，是看漫画的人之间的情谊的温暖：课间时间的信息交流，放学回家路上充满未来憧憬的探讨，周末相约逛漫画书店淘新书，那时仿佛自己就是大熊，或者大熊的伙伴。
&lt;/p&gt;&lt;!-- more --&gt;&lt;p&gt;
    相比哆啦a梦的男女老少皆宜，「龙珠」则显得热血少年一点。第一次接触它也是源于班里课间传递的单行本，我借到的第一本是悟空变身超级赛亚人大战弗利萨，这可不像哆啦a梦那些独立的小故事，没有上下文看的我晕头转向。然后基本是凭着班里的潮流，拉着老妈到新华书店对面的漫画书摊买下了第一套，五本，每本9毛，海南美术出版社。当时好像是凭着封面买的，打人造人16/17/18号，仍然没有上下文，人物关系都没搞清楚。后来也不知道怎么折腾，慢慢上道了，到后来每个章节的剧情都融会贯通。
&lt;/p&gt;&lt;p&gt;
    BTW，龙珠的前作阿拉蕾也同样精彩。
&lt;/p&gt;&lt;p&gt;
    爱看漫画的人，多多少少也会“露一手”，至少是照着原作画。我也不例外，因为喜欢一个角色了，就总喜欢亲自去画一画。当然要画的像模像样挺难，但课堂上无聊的时间挺多的，久而久之没有神似也能凑合一点形似了。
&lt;/p&gt;&lt;p&gt;
    后来初中、高中时候，每学期我会自己拿一叠A4复印纸订成一本草稿本，草稿本上正面做演算，背面就拿来画画，于是就有了下面这两张，第一个是略显Q版的一条辉，第二个是超级赛亚人第二形态的孙悟饭。当时我画的东西普遍有两个缺点，一是人物都是朝左看的，二是不会画手指，到后来也没搞定这两座大山。（其实我比较擅长画机械类的，宇宙船、机器人、车..因为机械类的多为直线，少有弧线）
&lt;/p&gt;&lt;p&gt;
    &lt;img id='FEE63F5BBCAA8489A370B967AB387BCB' src='http://m2.img.libdd.com/farm4/138/62FC40D2937F49E38072F2F73D4FCD8A_400_525.JPEG' /&gt;
&lt;/p&gt;&lt;p&gt;
    &lt;img id='1E794B316F350F04DEEFE4DEA5DB94A0' src='http://m3.img.libdd.com/farm4/112/90BB13996A1AE0355B3353B3EE935D70_400_525.JPEG' /&gt;&lt;br /&gt;
&lt;/p&gt;&lt;p&gt;
    （查看更多：&lt;a href='http://www.yupoo.com/photos/asuka4j/albums/813744/' target='_blank'&gt;时光机-我的手绘稿&lt;/a&gt;）
&lt;/p&gt;&lt;p&gt;
    &lt;strong&gt;Game&lt;/strong&gt;&lt;br /&gt;
&lt;/p&gt;&lt;p&gt;
    如果说动画和漫画相对小众，那么游戏大部分人肯定不陌生了。上过大学的人或多或少都玩过，或者看着室友玩过，不少人还是绝对的高手。不过让我觉得幸运的是，我对游戏的瘾是在上大学前消除的，主要在初一到高二，以至于大学里就不再对它感冒了，不至于想一些人沉迷其中不能自拔。这可能归功于老妈对我半放养式的教育，顺其自然不多干预，不然我肯定也是憋足了兴趣到大学里一次性爆发，一发就不可收拾。
&lt;/p&gt;&lt;p&gt;
    除开小学时偶尔偷偷玩的街机，我最热衷的是家用机系列，PS1、PS2、GBA一路这么过来（没PS3，因为上大学了）。大型RPG和SLG是最爱，什么「最终幻想」系列啦，「火焰纹章」系列啦，「SD高达」系列啦，「机器人大战」系列啦，只要当时新发行的，我基本都玩过，玩通。每次一款RPG通关时，还要回味好长一段时间，犹如看了一部意义深刻的电影或小说。另外，每月一刊的游戏杂志也是追加的乐趣，关于「TGS」、「E3」的最新报道，关于某个大作的剧情攻略，关于某些游戏团队的采访，都为游戏本身增色不少。（可惜后来「电软」没落了，「UCG」挂掉了）
&lt;/p&gt;&lt;p&gt;
    家用主机向来以高性能，大作层出著称，而缺点是游戏性局限在个人（尽管PS2加入了网络联机功能，中国大陆玩家还是很难享受到，原因您可能会懂）。所以和老友们一起玩的，还是通过网吧的即时战略类游戏居多。初中有很长一段时间，放学了就成群结伙地往网吧冲，「星际争霸」！暴雪真是一家神器的公司，这游戏竟百玩不腻。
&lt;/p&gt;&lt;p&gt;
    &lt;strong&gt;Model&lt;/strong&gt;
&lt;/p&gt;&lt;p&gt;
    对于ACG，我还会再加一个“M&amp;quot;，凑成ACGM。“M&amp;quot;是模型，主要是高达模型。嗯，我是个十足的高达迷，无论动画、游戏、还是模型。最早接触高达，是小学二年级，但不是我的：班里一名其貌不扬但实际是富仔的同学给我show他从汕头买回来的玩具，show的是一本说明书。我第一次见识到”玩具“的说明书可以是一本，而不是一页。他花了300RMB，天价，我当时每月的财政支出在个位数。后来才知道这货是需要自己拼装的，它那部是V2高达，也不知道他装成功了没有。到自己入手，是小学三年级。当时市里居然有两家“新潮”的店子，开始买翻版的W系列HG版模型（当时不知道翻版）。我马上被这些看似穿着日式盔甲的机械迷倒，短短时间入手了五部：飞翼零式、艾比安、多鲁基斯、双头龙和韦依埃度。后来陆陆续续的买入，家里翻版的HG囊括了 w、g、x 三个系列。但是挺悲剧的是，都是盗版，而且这三个系列都不是高达的正史。直到大学，大学是我买模型最疯狂的几年，各种系列只要顺眼都会考虑入手。逛论坛-公交车-百脑汇-公交车-宿舍装模型-逛论坛，是常见的线路。
&lt;/p&gt;&lt;p&gt;
    现在Bandai在天猫上开了&lt;a href='http://bandai.tmall.com/' target='_blank'&gt;旗舰店&lt;/a&gt;，价格也还算合理，不用再通过各种水货渠道买模型了。
&lt;/p&gt;&lt;p&gt;
    &lt;strong&gt;WWF&lt;/strong&gt;
&lt;/p&gt;&lt;p&gt;
    最后，贪心的我还想再加一个词儿，「W」，WWF的W。
&lt;/p&gt;&lt;p&gt;
   -EOF-
&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>我的2011</title>
   <link href="http://jiaqing.me/life/2012/01/01/summary-2011"/>
   <updated>2012-01-01T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2012/01/01/summary-2011</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>Jekyll Introduction</title>
   <link href="http://jiaqing.me/2011/12/29/jekyll-introduction"/>
   <updated>2011-12-29T00:00:00+08:00</updated>
   <id>http://jiaqing.me/2011/12/29/jekyll-introduction</id>
   <content type="html">&lt;p&gt;This Jekyll introduction will outline specifically what Jekyll is and why you would want to use it. Directly following the intro we&amp;#8217;ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id='overview'&gt;Overview&lt;/h2&gt;

&lt;h3 id='what_is_jekyll'&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as &amp;#8220;a simple, blog aware, static site generator&amp;#8221;.&lt;/p&gt;

&lt;h3 id='examples'&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href='https://github.com/mojombo/jekyll/wiki/Sites'&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id='what_does_jekyll_do'&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system. Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files, compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder. The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id='jekyll_is_not_blogging_software'&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements. This is a common source of confusion when getting started. Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id='why_should_i_care'&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient. The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server. Traditional dynamic blogs like Wordpress require a database and server-side code. Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;

&lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;

&lt;li&gt;No internet connection required.&lt;/li&gt;

&lt;li&gt;Ability to publish via git.&lt;/li&gt;

&lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;

&lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;

&lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='how_jekyll_works'&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples. This information is not intended to specifically teach you how to do anything, rather it is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id='initial_setup'&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href='/index.html#start-now'&gt;installing jekyll&lt;/a&gt; you&amp;#8217;ll need to format your website directory in a way jekyll expects. Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id='the_jekyll_application_base_format'&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;&lt;br /&gt;Stores configuration data.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;&lt;br /&gt;This folder is for partial views.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt; &lt;br /&gt;This folder is for the main templates your content will be inserted into. You can have different layouts for different pages or page sections.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;&lt;br /&gt;This folder contains your dynamic content/posts. the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;&lt;br /&gt;This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;&lt;br /&gt;This folder is not part of the standard jekyll structure. The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory. Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href='https://github.com/mojombo/jekyll/wiki/Usage'&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id='jekyll_configuration'&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here: &lt;a href='https://github.com/mojombo/jekyll/wiki/Configuration'&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='content_in_jekyll'&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page. These content &amp;#8220;objects&amp;#8221; get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id='posts_and_pages'&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax. Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id='working_with_posts'&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt; &lt;br /&gt;Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory. If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file. Additionally, each file must have &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;YAML Front-Matter&lt;/a&gt; prepended to its content. YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;&lt;br /&gt;Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy. Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt; &lt;br /&gt;Posts can have tags associated with them as part of their meta-data. Tags may be placed on posts by providing them in the post&amp;#8217;s YAML front matter. You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt; &lt;br /&gt;Posts may be categorized by providing one or more categories in the YAML front matter. Categories offer more significance over tags in that they can be reflected in the URL path to the given post. Note categories in Jekyll work in a specific way. If you define more than one category you are defining a category hierarchy &amp;#8220;set&amp;#8221;. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy &amp;#8220;lessons/beginner&amp;#8221;. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll. You won&amp;#8217;t find &amp;#8220;lessons&amp;#8221; and &amp;#8220;beginner&amp;#8221; as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id='working_with_pages'&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;&lt;br /&gt;Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;In order to register as a Jekyll page the file must contain &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;YAML Front-Matter&lt;/a&gt;. Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;&lt;br /&gt;Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;&lt;br /&gt;If pages are defined in sub-directories, the path to the page will be reflected in the url. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;br /&gt;You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;&lt;br /&gt;Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;&lt;br /&gt;Generating a sitemap is good practice for SEO.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;&lt;br /&gt;A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='templates_in_jekyll'&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page&amp;#8217;s or post&amp;#8217;s content. All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;. The site variable holds all accessible content and metadata relative to the site. The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;&lt;br /&gt;Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;Templates should be coded in HTML and contain YAML Front Matter. All templates can contain Liquid code to work with your site&amp;#8217;s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;&lt;br /&gt;There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;. The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined. Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='subtemplates'&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they define another &amp;#8220;root&amp;#8221; layout/template within their YAML Front Matter. This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id='includes'&gt;Includes&lt;/h3&gt;

&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder. Includes are NOT templates, rather they are just code snippets that get included into templates. In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id='using_liquid_for_templating'&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll. This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id='what_is_liquid'&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href='https://github.com/Shopify/liquid'&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href='http://shopify.com'&gt;Shopify&lt;/a&gt;. Liquid is designed for end-users to be able to execute logic within template files without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with your site and post/page data.&lt;/p&gt;

&lt;h3 id='why_do_we_have_to_use_liquid'&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href='http://pages.github.com/'&gt;GitHub Pages&lt;/a&gt;. GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id='liquid_is_not_programmerfriendly'&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code. The point being you can&amp;#8217;t do jackshit in liquid that hasn&amp;#8217;t been allowed explicitly by the implementation. What&amp;#8217;s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll&amp;#8217;s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins. Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt; &lt;br /&gt;My personal stance is to not invest time trying to hack liquid. It&amp;#8217;s really unnecessary &lt;em&gt;from a programmer&amp;#8217;s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code) you are better off sticking with ruby. Toward that end I&amp;#8217;ve built &lt;a href='http://github.com/plusjade/mustache-with-jekyll'&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='static_assets'&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages. That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id='how_jekyll_parses_files'&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt; &lt;br /&gt;This is done with textile or markdown.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt; &lt;br /&gt;This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;&lt;br /&gt;All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt; &lt;br /&gt;These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax. Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt; &lt;br /&gt;Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id='formatting_files_for_parsing'&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We&amp;#8217;ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;. Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty. This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block. The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here: &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id='defining_layouts_for_posts_and_templates_parsing'&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into. If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt; That is to say loading a post file into a template file that refers to another template file with work in the way you&amp;#8217;d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id='how_jekyll_generates_the_final_static_files'&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll&amp;#8217;s job is to generate a static representation of your website. The following is an outline of how that&amp;#8217;s done:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt; &lt;br /&gt;Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt; &lt;br /&gt;Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata. At this stage your site is one big computed ruby object.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;&lt;br /&gt;Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s). Once the post is parsed and liquified inside the the proper layout structure, the layout itself is &amp;#8220;liquified&amp;#8221;. &lt;br /&gt;&lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt; &lt;br /&gt;Finally the liquid templates are &amp;#8220;rendered&amp;#8221;, thereby processing any liquid syntax provided in the templates and saving the final, static representation of the file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;&lt;br /&gt;Because Jekyll computes the entire site in one fell swoop, each template is given access to a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you&amp;#8217;ll iterate through and format using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;

&lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap. You can also read the original documentation here: &lt;a href='https://github.com/mojombo/jekyll/wiki/Template-Data'&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='conclusion'&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does. As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id='next_steps'&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at &lt;a href='' /&gt; or jump right into &lt;a href=''&gt;Usage&lt;/a&gt; if you&amp;#8217;d like.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>城市印象：黄山</title>
   <link href="http://jiaqing.me/life/2011/10/06/impress-huangshan"/>
   <updated>2011-10-06T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2011/10/06/impress-huangshan</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>Goodbye Alipay</title>
   <link href="http://jiaqing.me/work/2011/09/17/goodbye-alipay"/>
   <updated>2011-09-17T00:00:00+08:00</updated>
   <id>http://jiaqing.me/work/2011/09/17/goodbye-alipay</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>城市印象：南京</title>
   <link href="http://jiaqing.me/life/2011/05/15/impress-nanjing"/>
   <updated>2011-05-15T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2011/05/15/impress-nanjing</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>城市印象：苏州</title>
   <link href="http://jiaqing.me/life/2011/04/11/impress-suzhou"/>
   <updated>2011-04-11T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2011/04/11/impress-suzhou</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>分布式数据访问概要</title>
   <link href="http://jiaqing.me/tech/2011/02/03/tech-talk-about-data-storage"/>
   <updated>2011-02-03T00:00:00+08:00</updated>
   <id>http://jiaqing.me/tech/2011/02/03/tech-talk-about-data-storage</id>
   <content type="html">&lt;p&gt;从09年下半年开始就一直在做支付宝的交易数据复制和存储相关的系统，经历了从刚开始连‘数据分片’是什么都不知道，到新个人版项目中搭建消费记录异步复制系统（+MySQL分片），到交易主库拆分项目中搭建消费记录查询系统，到前阵子解决大商户热点数据查询问题&amp;#8230;虽一路摸爬滚打，但多多少少也对这类大型互联网的数据存储和访问有了一些见解吧。趁着工作空挡梳理了一些相关的知识点，仅当记录。&lt;br /&gt;&lt;!-- more --&gt; PS: 点击&lt;a href='http://pic.yupoo.com/asuka4j/Bh5dBUaA/Qh29w.jpg'&gt;这里&lt;/a&gt;可以查看原图。&lt;br /&gt;PPS: 其实有不少知识点也还一知半解，后续需要再加强实践。&lt;br /&gt;PPPS: 把图放到ATIT内网，得到最Happy的评论莫过于”这图有点儿鲁肃@lusu的风格啊“ ：）&lt;br /&gt;&lt;center&gt;&lt;img data-pinit='registered' id='62E3958A3F03CE95FCC8EB38467A2733' src='http://m2.img.libdd.com/farm5/2012/1218/19/62E3958A3F03CE95FCC8EB38467A2733553CAA76C6D25_500_1870.jpg' /&gt;&lt;/center&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>城市印象：杭州</title>
   <link href="http://jiaqing.me/life/2011/01/12/impress-hangzhou"/>
   <updated>2011-01-12T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2011/01/12/impress-hangzhou</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>我的2010</title>
   <link href="http://jiaqing.me/life/2011/01/01/summary-2010"/>
   <updated>2011-01-01T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2011/01/01/summary-2010</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>城市印象：厦门</title>
   <link href="http://jiaqing.me/life/2010/07/30/impress-xiamen"/>
   <updated>2010-07-30T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2010/07/30/impress-xiamen</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>城市印象：横店</title>
   <link href="http://jiaqing.me/life/2010/04/29/impress-hengdian"/>
   <updated>2010-04-29T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2010/04/29/impress-hengdian</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>城市印象：信阳</title>
   <link href="http://jiaqing.me/life/2010/02/10/impress-xinyang"/>
   <updated>2010-02-10T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2010/02/10/impress-xinyang</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>我的2009</title>
   <link href="http://jiaqing.me/life/2010/01/01/summary-2009"/>
   <updated>2010-01-01T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2010/01/01/summary-2009</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>城市印象：深圳</title>
   <link href="http://jiaqing.me/life/2009/10/10/impress-shenzheng"/>
   <updated>2009-10-10T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2009/10/10/impress-shenzheng</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>城市印象：广州</title>
   <link href="http://jiaqing.me/life/2009/10/10/impress-guangzhou"/>
   <updated>2009-10-10T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2009/10/10/impress-guangzhou</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>城市印象：舟山</title>
   <link href="http://jiaqing.me/life/2009/07/23/zhoushan"/>
   <updated>2009-07-23T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2009/07/23/zhoushan</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>我的2008</title>
   <link href="http://jiaqing.me/life/2009/01/01/summary-2008"/>
   <updated>2009-01-01T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2009/01/01/summary-2008</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>城市印象：千岛湖</title>
   <link href="http://jiaqing.me/life/2008/07/07/impress-qiandaohu"/>
   <updated>2008-07-07T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2008/07/07/impress-qiandaohu</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>城市印象：成都</title>
   <link href="http://jiaqing.me/life/2008/07/01/impress-chengdu"/>
   <updated>2008-07-01T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2008/07/01/impress-chengdu</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>记忆：512实验室</title>
   <link href="http://jiaqing.me/life/2008/06/22/memory-512"/>
   <updated>2008-06-22T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2008/06/22/memory-512</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>记忆：汶川512大地震</title>
   <link href="http://jiaqing.me/life/2008/06/21/memory-512-earthquake"/>
   <updated>2008-06-21T00:00:00+08:00</updated>
   <id>http://jiaqing.me/life/2008/06/21/memory-512-earthquake</id>
   <content type="html"></content>
 </entry>
 
 
</feed>